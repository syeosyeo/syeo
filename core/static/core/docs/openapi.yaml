# 참고 - https://github.com/Redocly/redoc
# 테마설정 - https://github.com/Redocly/redoc/blob/63ae2e8e943b1cf2838db20c6c567156a2bfac45/src/theme.ts
# yaml 파일 문법 - https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#oasDocument

openapi: 3.0.0

# api 서버 주소 - 각 api 엔드포인트에 대한 full url 제공시 보여짐
# https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#server-object
servers:
  - url: https://datapack.cryptoquant.com/v1/
    description: Default server
  # - url: https://cryptoquant.com/sandbox/
  #   description: Sandbox server

# api 문서에 대한 설명
# https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#info-object
info:
  version: 0.9.1
  title: CQ DataPack™
  termsOfService: 'https://cryptoquant.com/terms_of_service/'
  contact:
    name: API Support
    email: contact@cryptoquant.com
    # url: support.cryptoquant.com
  description: |-
    Welcome to the CQ Datapack™ API. We provide simple and powerful endpoints, which you can use to get information on basic transaction data and aggregate on-chain statistics derived directly from the blockchain. This API reference provides information on available endpoints and how to interact with them.

    The API root endpoint URL is `https://datapack.cryptoquant.com/v1/`.

    # Introduction
    CQ Datapack offers a set of metrics to understand the entire blockchain ecosystem.

    ```
    https://datapack.cryptoquant.com/v1/

    ├── BTC/
    │   ├── Network/            // general statistics of Bitcoin network
    │   ├── Market/             // price, capitalization, market indicators
    │   └── Exchange-Flows/     // on-chain statistics of exchanges
    │   └── Miner-Flows/        // on-chain statistics of miners
    │   └── Inter-Entity-Flows/        // on-chain statistics of flows between entities
    └── StableCoin/
        ├── Network/            // USDT, TAXOS, USDC, DAI, TUSD
        ├── Market/             // price, capitalization, market indicators
        └── Exchange-Flows/     // on-chain statistics of exchanges

    ```
     <iframe src="https://docs.google.com/spreadsheets/d/e/2PACX-1vRj44BjZianQb0uG7CzFs5Uivn2dnyDQVZJPC0EzOqR40lBtawh-V9q6o2KV7TFJocf10mo4GWYQHfr/pubhtml?widget=true&amp;headers=false" style="width: 100%; height: 420px;"></iframe>

    ## Status Object
    Every response includes the status object which indicates if the request was successful. If it is not successful, 'message' specifies the cause of the error.
    ```
    {
      "status": {
          "code": 200,
          "message": "success"
      }
    }
    ```

    ## Status and Error Codes
    The CryptoQuant API uses standard HTTP status codes to indicate success or failure. 200 represents success, 4xx represents a user error (such as a problem with your key), and 5xx represents a problem with our API.

    The following table describes status and error codes returned by Datapack.
    In the status object, the `code` field contains the status code and the `message` field contains the type of response.

    | Code |   Type                  |   Description                                            |
    |------|-------------------------|----------------------------------------------------------|
    | 200  |   success               | Request was successful.                                  |
    | 200  |   deprecated            | A resource is deprecated and will removed in the future. |
    | 400  |   bad_request           | Some required parameter is missing or has the wrong value.   |
    | 401  |   unauthorized          | Internal authorization failed. It might mean missing or wrong credentials.   |
    | 404  |   not_found             | URI is not valid or the resource ID does not correspond to an existing resource. |
    | 405  |   not_allowed           | HTTP method not allowed, such as attempting to use a POST request with an endpoint that only accepts GET requests, or vice versa. |
    | 500  |   internal_server_error | Unexpected error occurred. Please report this when you see it. |



    # Authentication
    Each API request requires authentication to identify the member. Authentication is provided through an access token.
    For each API request, include this HTTP header:
    `Authorization` with the `Bearer {access_token}`.

    ## Examples
    ### HTTP Request
    ```
    GET v1/{PATH} HTTP/1.1
    Host: datapack.cryptoquant.com
    Authorization: Bearer {access_token}
    ```

    ### Python
    ```
    ''' for http.client '''
    conn = http.client.HTTPConnection(BASE_URL)
    headers = { 'Authorization': 'Bearer ' + access_token }
    conn.request("GET", "path,to,endpoint", headers=headers)
    response = conn.getresponse()

    ''' for requests '''
    import requests
    headers = { 'Authorization': 'Bearer ' + access_token }
    response = requests.get(URL, headers=headers)
    ```

    ### Javascript
    ```
    // for jquery AJAX
    var settings = {
      "url": URL,
      "method": "GET",
      "headers": {
        "Authorization": access_token
      }
    }

    $.ajax(settings).done(function (response) {
      console.log(response)
    })

    // for XHR
    var xhr = new XMLHttpRequest();
    xhr.withCredentials = true;
    xhr.addEventListener("readystatechange", function() {
      if (this.readyState === 4) {
        console.log(this.responseText);
      }
    });

    xhr.open("GET", URL);
    xhr.setRequestHeader("Authorization", access_token);
    xhr.send(null);
    ```


    # Time Convention
    Windows are provided in min, hour, day and block. Each metric supports different windows, so confirm the window and metric usage. Due to the fact that onchain data is constantly updated, the smallest period available is block. Daily and hourly units are provided for added versatility. Daily and hourly windows are an aggregate of all the blocks produced during that period or are based upon the most recent block produced from that point. Days begin at 00:00:00 UTC and end at 23:59:59 UTC. Hours begin with HH:00:00 and end with HH:59:59.

# externalDocs:
#   description: Find out how to create Github repo for your OpenAPI spec.
#   url: 'https://github.com/Rebilly/generator-openapi-repo'

# 좌측 메뉴에 나타나는 주요 항목들
tags:
  - name: BTC Network Data
    description: Bitcoin on-chain network data including but not limited to token movements, fees, supply, address movements, etc.
  - name: BTC Market Data
    description: This namespace contains endpoints to retrieve metrics related to the value of Bitcoin, including price, market cap, nvt ratio, realized cap, etc. On top of providing basic market data like usd price and market cap, we focus on onchain indicators in order to evaluate the true value of Bitcoin. These indicators are useful when investing, especially when finding highs or lows. For more detailed information, please refer to the description of each metric.
  - name: BTC Exchange Flows
    description: |-
      This endpoint returns the flows of BTC into exchange wallets for as far back as we track.
      ### Supported exchanges

      | Name           |   Symbol   |   Status    |
      |----------------|------------|-------------|
      | All Exchanges  |   `all`      |             |
      | Binance        |   `binance`  | Validated   |
      | Bitfinex       |   `bitfinex` | Validated   |
      | Bitmex         |   `bitmex`   | Validated   |
      | Bitflyer       |   `bitflyer` | In Progress |
      | Bitstamp       |   `bitstamp` | In Progress |
      | Bittrex        |   `Bittrex`  | Validated   |
      | Coinone        |   `coinone`  | Validated   |
      | GOPAX          |   `gopax`    | Validated   |
      | Huobi Global   |   `hubg`     | In Progress |
      | Korbit         |   `korbit`   | In Progress |
      | Kraken         |   `kraken`   | Validated   |
      | OKex           |   `okex`     | In Progress |
      | Poloniex       |   `poloniex` | Validated   |

  - name: BTC Miner Flows
    description: |-
      This namespace contains endpoints to retrieve data related to Bitcoin miners(i.e. mining pools). We provide metrics related to miner reserves, inflows, outflows, hashrate, revenue, workers, etc.
      ### Supported miners
      | Name           |   Symbol   |   Status    |
      |----------------|------------|-------------|
      | All Miners     |   `all`      |             |
      | Miner1        |   `miner1`  | Validated   |
  - name: BTC Inter Entity Flows
  - name: ETH Network Data
  - name: ETH Market Data
  - name: Stablecoin Network Data
    description: |-
      This namespace contains endpoint to retrieve on-chain network data of stablecoins, including token transfers, issuance, addresses, etc.
      ### Supported stablecoins
      | Name           |   Symbol   |
      |----------------|------------|
      | All tokens     |   `all`      |
      | Tether USD(ERC20)   |   `usdt_erc20`  |
      | Tether USD(Omni)    |   `usdt_omni` |
      | Paxos Standard      |   `paxos`   |
      | USD Coin       |   `usdc` |
      | True USD       |   `tusd` |
      | Dai        |   `dai`  |

      ### Stablecoin Issuing Mechanism
      Each individual Stablecoin is created by an issuing company and each of these companies operates with a different issue mechanism. 
      here are many of these but the two most common are as follows.

      #### Example 1
      `Image Should Be Here`
      Before providing clients with the granting address, the issuing company holds a treasury address. Through the contract, the tokens are minted and held in the treasury address. Once the client sends fiat currency, the clients tokens are moved from the treasury address to the client address and the tokens are listed as being issued. 
      Conversely, when redeeming tokens for fiat, the tokens are sent to the treasury address and redeemed. This won't be reflected in the supply unless these tokens are burned using a contract by the issuing company. The circulating supply is calculated as tokens that have been issued to clients, ignoring the supply held in the issuing company wallets.
      #### Example 2
      `Image Should Be Here`
      In this method, there is no separate treasury address. After confirming the deposit of fiat, tokens are minted from the contract address and delivered directly to the client address. Minting and issuance occur simultaneously. When clients redeem tokens, the burn and redemption also are simultaneous. 
      This means that with this method, total supply and circulating supply will be the same. There are various methods for Stablecoin issuance, and we calculated supply and locate significant transactions.  based upon these types of factors. In the future, mint/issue/burn/redeem will be added to our available metrics and will be defined as listed below.

      #### Terminology

      | Term          |   Definition   |
      |----------------|------------|
      | Mint    |  Mint is a creation of new tokens that add to the supply. When tokens are minted, the total supply will increase.      |
      | Issue   |Issue is when tokens are delivered to clients after deposit of fiat has been confirmed. When tokens are issued, the circulating supply will increase. |
      | Burn   |Burn is a revocation of currently existing tokens that results in a decreased supply. The opposite of Mint.|
      | Redeem     | Redeem is an exchange of tokens for deposited fiat that results in a decrease in the circulating supply. The opposite of Issue.|

  - name: Stablecoin Market Data
    description: This namespace contains endpoints to retrieve metrics related to the value of tokens, including price, market cap etc.
x-tagGroups:
  - name: Bitcoin
    tags:
      - BTC Network Data
      - BTC Market Data
      - BTC Exchange Flows
      - BTC Miner Flows
      - BTC Inter Entity Flows
  - name: Stablecoin
    tags:
      - Stablecoin Network Data
      - Stablecoin Market Data
# 사용 가능한 api 목록과 파라미터 등
# https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#info-object
paths:
  /btc/network-data/block-bytes:
    get:
      tags:
        - BTC Network Data
      summary: Block Bytes
      operationId: getBlockBytes
      x-code-samples:
        - lang: Shell
          source: >-
            curl
            "https://datapack.cryptoquant.com/v1/btc/network-data/block-bytes?window=day&isrange=true&period=190901-190903"
        - lang: JavaScript
          source: >-
            fetch("https://datapack.cryptoquant.com/v1/btc/network-data/block-bytes?window=day&isrange=true&period=190901-190903")
              .then(response => response.json())
              .then(data => console.log(data))
        - lang: NodeJS
          source: |-
            require('axios')
              .get("https://datapack.cryptoquant.com/v1/btc/network-data/block-bytes?window=day&isrange=true&period=190901-190903")
              .then(response => console.log(response))
        - lang: Ruby
          source: >-
            require 'net/http'

            uri =
            URI("https://datapack.cryptoquant.com/v1/btc/network-data/block-bytes?window=day&isrange=true&period=190901-190903")

            puts Net::HTTP.get(uri)
        - lang: Python
          source: >-
            import urllib.request

            url =
            "https://datapack.cryptoquant.com/v1/btc/network-data/block-bytes?window=day&isrange=true&period=190901-190903"

            print(urllib.request.urlopen(url).read())
      description: The mean size(in bytes) of all blocks generated at a given window.
      parameters:
        - $ref: '#/components/parameters/window'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/limit'
      responses:
        200:
          $ref: '#/components/responses/BlockBytes'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - Bearer Access Token: []
  /btc/network-data/block-count:
    get:
      tags:
        - BTC Network Data
      summary: Block Count
      description:  The number of blocks generated in a given window.
      operationId: getBlockCount
      parameters:
        - $ref: '#/components/parameters/window'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/limit'
      x-code-samples:
        - lang: Shell
          source: >-
            curl
            "https://datapack.cryptoquant.com/v1/btc/network-data/block-count?window=day&isrange=true&period=190901-190903"
        - lang: JavaScript
          source: >-
            fetch("https://datapack.cryptoquant.com/v1/btc/network-data/block-count?window=day&isrange=true&period=190901-190903")
              .then(response => response.json())
              .then(data => console.log(data))
        - lang: NodeJS
          source: |-
            require('axios')
              .get("https://datapack.cryptoquant.com/v1/btc/network-data/block-count?window=day&isrange=true&period=190901-190903")
              .then(response => console.log(response))
        - lang: Ruby
          source: >-
            require 'net/http'

            uri =
            URI("https://datapack.cryptoquant.com/v1/btc/network-data/block-count?window=day&isrange=true&period=190901-190903")

            puts Net::HTTP.get(uri)
        - lang: Python
          source: >-
            import urllib.request

            url =
            "https://datapack.cryptoquant.com/v1/btc/network-data/block-count?window=day&isrange=true&period=190901-190903"

            print(urllib.request.urlopen(url).read())
      responses:
        200:
          $ref: '#/components/responses/BlockCount'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - Bearer Access Token: []

  /btc/network-data/block-interval:
    get:
      tags:
        - BTC Network Data
      summary: Block Interval
      description: The average time between all the blocks generated during a given window displayed in seconds.
      operationId: getBlockInterval
      parameters:
        - $ref: '#/components/parameters/window'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/limit'
      x-code-samples:
        - lang: Shell
          source: >-
            curl
            "https://datapack.cryptoquant.com/v1/btc/network-data/block-interval?window=day&isrange=true&period=190901-190903"
        - lang: JavaScript
          source: >-
            fetch("https://datapack.cryptoquant.com/v1/btc/network-data/block-interval?window=day&isrange=true&period=190901-190903")
              .then(response => response.json())
              .then(data => console.log(data))
        - lang: NodeJS
          source: |-
            require('axios')
              .get("https://datapack.cryptoquant.com/v1/btc/network-data/block-interval?window=day&isrange=true&period=190901-190903")
              .then(response => console.log(response))
        - lang: Ruby
          source: >-
            require 'net/http'

            uri =
            URI("https://datapack.cryptoquant.com/v1/btc/network-data/block-interval?window=day&isrange=true&period=190901-190903")

            puts Net::HTTP.get(uri)
        - lang: Python
          source: >-
            import urllib.request

            url =
            "https://datapack.cryptoquant.com/v1/btc/network-data/block-interval?window=day&isrange=true&period=190901-190903"

            print(urllib.request.urlopen(url).read())
      responses:
        200:
          $ref: '#/components/responses/BlockInterval'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - Bearer Access Token: []


  /btc/network-data/utxo-count:
    get:
      tags:
        - BTC Network Data
      summary: UTXO Count
      description: The number of total number of unspent transaction outputs existing at the specified point.
      operationId: getUTXOCount
      parameters:
        - $ref: '#/components/parameters/window'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/limit'
      x-code-samples:
        - lang: Shell
          source: >-
            curl
            "https://datapack.cryptoquant.com/v1/btc/network-data/utxo-count?window=day&isrange=true&period=190901-190903"
        - lang: JavaScript
          source: >-
            fetch("https://datapack.cryptoquant.com/v1/btc/network-data/utxo-count?window=day&isrange=true&period=190901-190903")
              .then(response => response.json())
              .then(data => console.log(data))
        - lang: NodeJS
          source: |-
            require('axios')
              .get("https://datapack.cryptoquant.com/v1/btc/network-data/utxo-count?window=day&isrange=true&period=190901-190903")
              .then(response => console.log(response))
        - lang: Ruby
          source: >-
            require 'net/http'

            uri =
            URI("https://datapack.cryptoquant.com/v1/btc/network-data/utxo-count?window=day&isrange=true&period=190901-190903")

            puts Net::HTTP.get(uri)
        - lang: Python
          source: >-
            import urllib.request

            url =
            "https://datapack.cryptoquant.com/v1/btc/network-data/utxo-count?window=day&isrange=true&period=190901-190903"

            print(urllib.request.urlopen(url).read())
      responses:
        200:
          $ref: '#/components/responses/UTXOCount'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - Bearer Access Token: []

  /btc/network-data/fees:
    get:
      tags:
        - BTC Network Data
      summary: Fees
      description: This endpoint returns the statistics related to fees that are paid to bitcoin miners. In general, fees are calculated by subtracting the newly issued bitcoin from the total block reward of each blocks. We provide three statistics, `fees_total`, the sum of all fees during a given window, `fees_mean`, the average fee per block in that window, and `fees_percent`, the percentage of fees relative to the total block reward. Additionally, these can be viewed in terms of USD.
      operationId: getFees
      parameters:
        - $ref: '#/components/parameters/window'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/limit'
      x-code-samples:
        - lang: Shell
          source: >-
            curl
            "https://datapack.cryptoquant.com/v1/btc/network-data/fees?window=day&isrange=true&period=190901-190903"
        - lang: JavaScript
          source: >-
            fetch("https://datapack.cryptoquant.com/v1/btc/network-data/fees?window=day&isrange=true&period=190901-190903")
              .then(response => response.json())
              .then(data => console.log(data))
        - lang: NodeJS
          source: |-
            require('axios')
              .get("https://datapack.cryptoquant.com/v1/btc/network-data/fees?window=day&isrange=true&period=190901-190903")
              .then(response => console.log(response))
        - lang: Ruby
          source: >-
            require 'net/http'

            uri =
            URI("https://datapack.cryptoquant.com/v1/btc/network-data/fees?window=day&isrange=true&period=190901-190903")

            puts Net::HTTP.get(uri)
        - lang: Python
          source: >-
            import urllib.request

            url =
            "https://datapack.cryptoquant.com/v1/btc/network-data/fees?window=day&isrange=true&period=190901-190903"

            print(urllib.request.urlopen(url).read())
      responses:
        200:
          $ref: '#/components/responses/Fees'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - Bearer Access Token: []

  /btc/network-data/fees-transaction:
    get:
      tags:
        - BTC Network Data
      summary: Fees Transaction
      description: This endpoint returns the statistics related to fees per transaction that are paid to bitcoin miners. In general, fees are calculated by subtracting the newly issued bitcoin from the total block reward of each blocks, and this is divided by the number of transactions to calculate the average fee per transaction in each block. We provide two statistics, `fees_transaction_mean`, the average fee per transaction in a given window, `fees_transaction_median,` the median fee per transaction in that window. Additionally, these values can be calculated in USD.
      operationId: getFeesTransaction
      parameters:
        - $ref: '#/components/parameters/window'
        - $ref: '#/components/parameters/isrange'
        - $ref: '#/components/parameters/period'
      x-code-samples:
        - lang: Shell
          source: >-
            curl
            "https://datapack.cryptoquant.com/v1/btc/network-data/fees-transaction?window=day&isrange=true&period=190901-190903"
        - lang: JavaScript
          source: >-
            fetch("https://datapack.cryptoquant.com/v1/btc/network-data/fees-transaction?window=day&isrange=true&period=190901-190903")
              .then(response => response.json())
              .then(data => console.log(data))
        - lang: NodeJS
          source: |-
            require('axios')
              .get("https://datapack.cryptoquant.com/v1/btc/network-data/fees-transaction?window=day&isrange=true&period=190901-190903")
              .then(response => console.log(response))
        - lang: Ruby
          source: >-
            require 'net/http'

            uri =
            URI("https://datapack.cryptoquant.com/v1/btc/network-data/fees-transaction?window=day&isrange=true&period=190901-190903")

            puts Net::HTTP.get(uri)
        - lang: Python
          source: >-
            import urllib.request

            url =
            "https://datapack.cryptoquant.com/v1/btc/network-data/fees-transaction?window=day&isrange=true&period=190901-190903"

            print(urllib.request.urlopen(url).read())
      responses:
        200:
          $ref: '#/components/responses/FeesTransaction'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - Bearer Access Token: []

  /btc/network-data/blockreward:
    get:
      tags:
        - BTC Network Data
      summary: Blockreward
      description: The sum of block reward for all blocks in a given window. We also provide this value in usd.
      operationId: getBlockReward
      parameters:
        - $ref: '#/components/parameters/window'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/limit'
      x-code-samples:
        - lang: Shell
          source: >-
            curl
            "https://datapack.cryptoquant.com/v1/btc/network-data/block-reward?window=day&isrange=true&period=190901-190903"
        - lang: JavaScript
          source: >-
            fetch("https://datapack.cryptoquant.com/v1/btc/network-data/block-reward?window=day&isrange=true&period=190901-190903")
              .then(response => response.json())
              .then(data => console.log(data))
        - lang: NodeJS
          source: |-
            require('axios')
              .get("https://datapack.cryptoquant.com/v1/btc/network-data/block-reward?window=day&isrange=true&period=190901-190903")
              .then(response => console.log(response))
        - lang: Ruby
          source: >-
            require 'net/http'

            uri =
            URI("https://datapack.cryptoquant.com/v1/btc/network-data/block-reward?window=day&isrange=true&period=190901-190903")

            puts Net::HTTP.get(uri)
        - lang: Python
          source: >-
            import urllib.request

            url =
            "https://datapack.cryptoquant.com/v1/btc/network-data/block-reward?window=day&isrange=true&period=190901-190903"

            print(urllib.request.urlopen(url).read())
      responses:
        200:
          $ref: '#/components/responses/BlockReward'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - Bearer Access Token: []

  /btc/network-data/difficulty:
    get:
      tags:
        - BTC Network Data
      summary: Difficulty
      description:  The mean difficulty of mining a new BTC block in a given period.
      operationId: getDifficulty
      parameters:
        - $ref: '#/components/parameters/window'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/limit'
      x-code-samples:
        - lang: Shell
          source: >-
            curl
            "https://datapack.cryptoquant.com/v1/btc/network-data/difficulty?window=day&isrange=true&period=190901-190903"
        - lang: JavaScript
          source: >-
            fetch("https://datapack.cryptoquant.com/v1/btc/network-data/difficulty?window=day&isrange=true&period=190901-190903")
              .then(response => response.json())
              .then(data => console.log(data))
        - lang: NodeJS
          source: |-
            require('axios')
              .get("https://datapack.cryptoquant.com/v1/btc/network-data/difficulty?window=day&isrange=true&period=190901-190903")
              .then(response => console.log(response))
        - lang: Ruby
          source: >-
            require 'net/http'

            uri =
            URI("https://datapack.cryptoquant.com/v1/btc/network-data/difficulty?window=day&isrange=true&period=190901-190903")

            puts Net::HTTP.get(uri)
        - lang: Python
          source: >-
            import urllib.request

            url =
            "https://datapack.cryptoquant.com/v1/btc/network-data/difficulty?window=day&isrange=true&period=190901-190903"

            print(urllib.request.urlopen(url).read())
      responses:
        200:
          $ref: '#/components/responses/Difficulty'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - Bearer Access Token: []

  /btc/network-data/hashrate:
    get:
      tags:
        - BTC Network Data
      summary: Hashrate
      description: The mean speed at which miners in the network are solving hash problems for  a given window. It is displayed as hashes per second.
      operationId: getHashrate
      parameters:
        - $ref: '#/components/parameters/window'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/limit'
      x-code-samples:
        - lang: Shell
          source: >-
            curl
            "https://datapack.cryptoquant.com/v1/btc/network-data/hashrate?window=day&isrange=true&period=190901-190903"
        - lang: JavaScript
          source: >-
            fetch("https://datapack.cryptoquant.com/v1/btc/network-data/hashrate?window=day&isrange=true&period=190901-190903")
              .then(response => response.json())
              .then(data => console.log(data))
        - lang: NodeJS
          source: |-
            require('axios')
              .get("https://datapack.cryptoquant.com/v1/btc/network-data/hashrate?window=day&isrange=true&period=190901-190903")
              .then(response => console.log(response))
        - lang: Ruby
          source: >-
            require 'net/http'

            uri =
            URI("https://datapack.cryptoquant.com/v1/btc/network-data/hashrate?window=day&isrange=true&period=190901-190903")

            puts Net::HTTP.get(uri)
        - lang: Python
          source: >-
            import urllib.request

            url =
            "https://datapack.cryptoquant.com/v1/btc/network-data/hashrate?window=day&isrange=true&period=190901-190903"

            print(urllib.request.urlopen(url).read())
      responses:
        200:
          $ref: '#/components/responses/Hashrate'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - Bearer Access Token: []

  /btc/network-data/supply:
    get:
      tags:
        - BTC Network Data
      summary: Supply
      description: This end point returns metrics related to bitcoin supply, i.e. the amount of bitcoin in existence. We currently provide two metrics, `supply_total` , the total amount of bitcoins in existence which is the sum of all bitcoins issued by coinbase reward, and `supply_new`, the amount of newly issued tokens in a given window.
      operationId: getSupply
      parameters:
        - $ref: '#/components/parameters/window'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/limit'
      x-code-samples:
        - lang: Shell
          source: >-
            curl
            "https://datapack.cryptoquant.com/v1/btc/network-data/supply?window=day&isrange=true&period=190901-190903"
        - lang: JavaScript
          source: >-
            fetch("https://datapack.cryptoquant.com/v1/btc/network-data/supply?window=day&isrange=true&period=190901-190903")
              .then(response => response.json())
              .then(data => console.log(data))
        - lang: NodeJS
          source: |-
            require('axios')
              .get("https://datapack.cryptoquant.com/v1/btc/network-data/supply?window=day&isrange=true&period=190901-190903")
              .then(response => console.log(response))
        - lang: Ruby
          source: >-
            require 'net/http'

            uri =
            URI("https://datapack.cryptoquant.com/v1/btc/network-data/supply?window=day&isrange=true&period=190901-190903")

            puts Net::HTTP.get(uri)
        - lang: Python
          source: >-
            import urllib.request

            url =
            "https://datapack.cryptoquant.com/v1/btc/network-data/supply?window=day&isrange=true&period=190901-190903"

            print(urllib.request.urlopen(url).read())
      responses:
        200:
          $ref: '#/components/responses/Supply'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - Bearer Access Token: []

  /btc/network-data/transactions-count:
    get:
      tags:
        - BTC Network Data
      summary: Transactions Count
      description: This endpoint returns metrics related to the number of transactions in that window. We provide several metrics, `transactions_count_total`, the total number of transactions in that window `transactions_count_mean`, the mean number of transactions per block in that window.
      operationId: getTransactionsCount
      parameters:
        - $ref: '#/components/parameters/window'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/limit'
      x-code-samples:
        - lang: Shell
          source: >-
            curl
            "https://datapack.cryptoquant.com/v1/btc/network-data/transactions-count?window=day&isrange=true&period=190901-190903"
        - lang: JavaScript
          source: >-
            fetch("https://datapack.cryptoquant.com/v1/btc/network-data/transactions-count?window=day&isrange=true&period=190901-190903")
              .then(response => response.json())
              .then(data => console.log(data))
        - lang: NodeJS
          source: |-
            require('axios')
              .get("https://datapack.cryptoquant.com/v1/btc/network-data/transactions-count?window=day&isrange=true&period=190901-190903")
              .then(response => console.log(response))
        - lang: Ruby
          source: >-
            require 'net/http'

            uri =
            URI("https://datapack.cryptoquant.com/v1/btc/network-data/transactions-count?window=day&isrange=true&period=190901-190903")

            puts Net::HTTP.get(uri)
        - lang: Python
          source: >-
            import urllib.request

            url =
            "https://datapack.cryptoquant.com/v1/btc/network-data/transactions-count?window=day&isrange=true&period=190901-190903"

            print(urllib.request.urlopen(url).read())
      responses:
        200:
          $ref: '#/components/responses/TransactionsCount'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - Bearer Access Token: []

  /btc/network-data/tokens-transferred:
    get:
      tags:
        - BTC Network Data
      summary: Tokens Transferred
      description: This endpoint returns metrics related to number of tokens transferred, i.e transaction volume. We provide several metrics, `tokens_transferred_total`, the total number of transferred tokens in that window, `tokens_transferred_mean`, the mean number of transferred tokens per transaction in that window, and `tokens_transferred_median`, the median number of transferred tokens per transaction.
      operationId: getTokensTransferred
      parameters:
        - $ref: '#/components/parameters/window'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/limit'
      x-code-samples:
        - lang: Shell
          source: >-
            curl
            "https://datapack.cryptoquant.com/v1/btc/network-data/tokens-transferred?window=day&isrange=true&period=190901-190903"
        - lang: JavaScript
          source: >-
            fetch("https://datapack.cryptoquant.com/v1/btc/network-data/tokens-transferred?window=day&isrange=true&period=190901-190903")
              .then(response => response.json())
              .then(data => console.log(data))
        - lang: NodeJS
          source: |-
            require('axios')
              .get("https://datapack.cryptoquant.com/v1/btc/network-data/tokens-transferred?window=day&isrange=true&period=190901-190903")
              .then(response => console.log(response))
        - lang: Ruby
          source: >-
            require 'net/http'

            uri =
            URI("https://datapack.cryptoquant.com/v1/btc/network-data/tokens-transferred?window=day&isrange=true&period=190901-190903")

            puts Net::HTTP.get(uri)
        - lang: Python
          source: >-
            import urllib.request

            url =
            "https://datapack.cryptoquant.com/v1/btc/network-data/tokens-transferred?window=day&isrange=true&period=190901-190903"

            print(urllib.request.urlopen(url).read())
      responses:
        200:
          $ref: '#/components/responses/TokensTransferred'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - Bearer Access Token: []

  /btc/network-data/velocity:
    get:
      tags:
        - BTC Network Data
      summary: Velocity
      description: This endpoint returns metrics related to the velocity of bitcoin. Bitcoin's velocity is calculated by dividing the trailing 1 year estimated transaction volume(the cumulated sum of transferred tokens) by current supply. Velocity is a metric that explains how actively is money circulating in the market.
      operationId: getVelocity
      parameters:
        - $ref: '#/components/parameters/window_d'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/limit'
      x-code-samples:
        - lang: Shell
          source: >-
            curl
            "https://datapack.cryptoquant.com/v1/btc/network-data/velocity?window=day&isrange=true&period=190901-190903"
        - lang: JavaScript
          source: >-
            fetch("https://datapack.cryptoquant.com/v1/btc/network-data/velocity?window=day&isrange=true&period=190901-190903")
              .then(response => response.json())
              .then(data => console.log(data))
        - lang: NodeJS
          source: |-
            require('axios')
              .get("https://datapack.cryptoquant.com/v1/btc/network-data/velocity?window=day&isrange=true&period=190901-190903")
              .then(response => console.log(response))
        - lang: Ruby
          source: >-
            require 'net/http'

            uri =
            URI("https://datapack.cryptoquant.com/v1/btc/network-data/velocity?window=day&isrange=true&period=190901-190903")

            puts Net::HTTP.get(uri)
        - lang: Python
          source: >-
            import urllib.request

            url =
            "https://datapack.cryptoquant.com/v1/btc/network-data/velocity?window=day&isrange=true&period=190901-190903"

            print(urllib.request.urlopen(url).read())
      responses:
        200:
          $ref: '#/components/responses/Velocity'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - Bearer Access Token: []

  /btc/network-data/addresses-count:
    get:
      tags:
        - BTC Network Data
      summary: Addresses Count
      description: This endpoint returns metrics relating to the number of used bitcoin addresses. We provide several metrics, `addresses_count_active`, the total number of unique addresses that were active (either sender or receiver) on the blockchain in a given window, `addresses_count_sender`, the number of addresses that were active as a sender, `addresses_count_receiver`, the number of addresses that were active as a receiver, and `addresses_count_new`, the number of new addresses which appeared on the blockchain for the first time.
      operationId: getAddressesCount
      parameters:
        - $ref: '#/components/parameters/window'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/limit'
      x-code-samples:
        - lang: Shell
          source: >-
            curl
            "https://datapack.cryptoquant.com/v1/btc/network-data/addresses-count?window=day&isrange=true&period=190901-190903"
        - lang: JavaScript
          source: >-
            fetch("https://datapack.cryptoquant.com/v1/btc/network-data/addresses-count?window=day&isrange=true&period=190901-190903")
              .then(response => response.json())
              .then(data => console.log(data))
        - lang: NodeJS
          source: |-
            require('axios')
              .get("https://datapack.cryptoquant.com/v1/btc/network-data/addresses-count?window=day&isrange=true&period=190901-190903")
              .then(response => console.log(response))
        - lang: Ruby
          source: >-
            require 'net/http'

            uri =
            URI("https://datapack.cryptoquant.com/v1/btc/network-data/addresses-count?window=day&isrange=true&period=190901-190903")

            puts Net::HTTP.get(uri)
        - lang: Python
          source: >-
            import urllib.request

            url =
            "https://datapack.cryptoquant.com/v1/btc/network-data/addresses-count?window=day&isrange=true&period=190901-190903"

            print(urllib.request.urlopen(url).read())
      responses:
        200:
          $ref: '#/components/responses/AddressesCount'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - Bearer Access Token: []

  # /btc/network-data/inflation:
  #   get:
  #     tags:
  #       - BTC Network Data
  #     summary: Inflation
  #     description: This end point returns metrics relating to the bitcoin inflation rate. We provide `inflation_daily`, which is daily inflation rate calculated by dividing the number of newly issued tokens on that day by the total supply.
  #     operationId: getInflation
  #     parameters:
  #       - $ref: '#/components/parameters/window'
  #       - $ref: '#/components/parameters/isrange'
  #       - $ref: '#/components/parameters/period'
  #     x-code-samples:
  #       - lang: Shell
  #         source: >-
  #           curl
  #           "https://datapack.cryptoquant.com/v1/btc/network-data/inflation?window=day&isrange=true&period=190901-190903"
  #       - lang: JavaScript
  #         source: >-
  #           fetch("https://datapack.cryptoquant.com/v1/btc/network-data/inflation?window=day&isrange=true&period=190901-190903")
  #             .then(response => response.json())
  #             .then(data => console.log(data))
  #       - lang: NodeJS
  #         source: |-
  #           require('axios')
  #             .get("https://datapack.cryptoquant.com/v1/btc/network-data/inflation?window=day&isrange=true&period=190901-190903")
  #             .then(response => console.log(response))
  #       - lang: Ruby
  #         source: >-
  #           require 'net/http'
  #
  #           uri =
  #           URI("https://datapack.cryptoquant.com/v1/btc/network-data/inflation?window=day&isrange=true&period=190901-190903")
  #
  #           puts Net::HTTP.get(uri)
  #       - lang: Python
  #         source: >-
  #           import urllib.request
  #
  #           url =
  #           "https://datapack.cryptoquant.com/v1/btc/network-data/inflation?window=day&isrange=true&period=190901-190903"
  #
  #           print(urllib.request.urlopen(url).read())
  #     responses:
  #       200:
  #         $ref: '#/components/responses/Inflation'
  #       401:
  #         $ref: '#/components/responses/Unauthorized'
  #     security:
  #       - Bearer Access Token: []

  /btc/market-data/price-usd:
    get:
      tags:
        - BTC Market Data
      summary: Price USD
      description: This endpoint returns metrics related to the US Dollar(USD) price of BTC. At this endpoint, metrics are calculated by Minute, Day, and Block. We provide four metrics, `price_usd_open`, USD opening price at the beginning of the window, `price_usd_close`, USD closing price at the end of the window, `price_usd_high`, the highest USD price in a given window, and `price_usd_low`, the lowest USD price in a given window.
      operationId: getPriceUSD
      parameters:
        - $ref: '#/components/parameters/window_mdb'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/limit'
      x-code-samples:
        - lang: Shell
          source: >-
            curl
            "https://datapack.cryptoquant.com/v1/btc/market-data/price-usd?window=day&start=191001&limit=2"
        - lang: JavaScript
          source: >-
            fetch("https://datapack.cryptoquant.com/v1/btc/market-data/price-usd?window=day&start=191001&limit=2")
              .then(response => response.json())
              .then(data => console.log(data))
        - lang: NodeJS
          source: |-
            require('axios')
              .get("https://datapack.cryptoquant.com/v1/btc/market-data/price-usd?window=day&start=191001&limit=2")
              .then(response => console.log(response))
        - lang: Ruby
          source: >-
            require 'net/http'

            uri =
            URI("https://datapack.cryptoquant.com/v1/btc/market-data/price-usd?window=day&start=191001&limit=2")

            puts Net::HTTP.get(uri)
        - lang: Python
          source: >-
            import urllib.request

            url =
            "https://datapack.cryptoquant.com/v1/btc/market-data/price-usd?window=day&start=191001&limit=2"

            print(urllib.request.urlopen(url).read())
      responses:
        200:
          $ref: '#/components/responses/PriceUSD'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - Bearer Access Token: []

  /btc/market-data/capitalization:
    get:
      tags:
        - BTC Market Data
      summary: Capitalization
      description: This endpoint returns metrics related to market capitalization. First, we provide `market_cap`, which is total market capitalization of BTC, calculated by multiplying the total supply with its USD price. Moreover, we provide several adjusted capitalization metrics which are used for proper BTC valuation. `realized_cap` is the sum of each UTXO * last movement price. Since cryptocurrencies are vulnerable of being lost, unclaimed, or unreachable through various bugs, `realized_cap` is introduced to discount those coins which have unmoved for a long period. It indicates whether Bitcoin is overvalued or not. This can be described as an on-chain version of volume weighted average price(VWAP). `average_cap` is forever moving average, calculated by dividing the cumulated sum of daily market cap with the age of market. Instead of using fixed time for calculating the moving average (e.g. 50 days, 100days ...), this serves as the true mean.  Both `realized_cap` and `average_cap` are used to calculate `delta_cap` (`realized_cap`-`average_cap`). `delta_cap` is capable of spotting market bottoms. Moreover, by analyzing the movement of `delta_cap` which oscillates between `realized_cap` and `average_cap`, we could notice that market tops are reached when `delta_cap` is near `realized_cap`(in a log scaled chart). `mvrv`(Market-Value-to-Realized-Value) is a ratio, `market_cap` divided by `realized_cap`. It can be interpreted as the relationship between short-term and long-term investors (i.e. speculators vs hodlers). When this value is too high, BTC price may be overvalued, and if it is too low, there is a possibility that the price is undervalued.
      operationId: getCapitalization
      parameters:
        - $ref: '#/components/parameters/window'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/limit'
      x-code-samples:
        - lang: Shell
          source: >-
            curl
            "https://datapack.cryptoquant.com/v1/btc/market-data/capitalization?window=day&start=191001&limit=2"
        - lang: JavaScript
          source: >-
            fetch("https://datapack.cryptoquant.com/v1/btc/market-data/capitalization?window=day&start=191001&limit=2")
              .then(response => response.json())
              .then(data => console.log(data))
        - lang: NodeJS
          source: |-
            require('axios')
              .get("https://datapack.cryptoquant.com/v1/btc/market-data/capitalization?window=day&start=191001&limit=2")
              .then(response => console.log(response))
        - lang: Ruby
          source: >-
            require 'net/http'

            uri =
            URI("https://datapack.cryptoquant.com/v1/btc/market-data/capitalization?window=day&start=191001&limit=2")

            puts Net::HTTP.get(uri)
        - lang: Python
          source: >-
            import urllib.request

            url =
            "https://datapack.cryptoquant.com/v1/btc/market-data/capitalization?window=day&start=191001&limit=2"

            print(urllib.request.urlopen(url).read())
      responses:
        200:
          $ref: '#/components/responses/Capitalization'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - Bearer Access Token: []


  /btc/market-data/nvt:
    get:
      tags:
        - BTC Market Data
      summary: NVT
      description: NVT(Network Value to Transaction) ratio is the network value(`supply_total`) divided by `tokens_transferred_total`. `nvt` is a metric often used to determine whether Bitcoin price is overvalued or not. The theory behind this indicator is that the value of the token depends on how actively transactions take place on the network.
      operationId: getNVT
      parameters:
        - $ref: '#/components/parameters/window'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/limit'
      x-code-samples:
        - lang: Shell
          source: >-
            curl
            "https://datapack.cryptoquant.com/v1/btc/market-data/nvt?window=day&start=191001&limit=2"
        - lang: JavaScript
          source: >-
            fetch("https://datapack.cryptoquant.com/v1/btc/market-data/nvt?window=day&start=191001&limit=2")
              .then(response => response.json())
              .then(data => console.log(data))
        - lang: NodeJS
          source: |-
            require('axios')
              .get("https://datapack.cryptoquant.com/v1/btc/market-data/nvt?window=day&start=191001&limit=2")
              .then(response => console.log(response))
        - lang: Ruby
          source: >-
            require 'net/http'

            uri =
            URI("https://datapack.cryptoquant.com/v1/btc/market-data/nvt?window=day&start=191001&limit=2")

            puts Net::HTTP.get(uri)
        - lang: Python
          source: >-
            import urllib.request

            url =
            "https://datapack.cryptoquant.com/v1/btc/market-data/nvt?window=day&start=191001&limit=2"

            print(urllib.request.urlopen(url).read())
      responses:
        200:
          $ref: '#/components/responses/NVT'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - Bearer Access Token: []



  /btc/exchange-flows/reserve:
    get:
      tags:
        - BTC Exchange Flows
      summary: Reserve (Exchange)
      description: This endpoint returns the full historical on-chain balance of Bitcoin exchanges.
      operationId: getReserve
      parameters:
        - $ref: '#/components/parameters/exchange'
        - $ref: '#/components/parameters/window'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/limit'
      x-code-samples:
        - lang: Shell
          source: >-
            curl
            "https://datapack.cryptoquant.com/v1/btc/exchange-flows/reserve?window=day&start=191001&limit=2"
        - lang: JavaScript
          source: >-
            fetch("https://datapack.cryptoquant.com/v1/btc/exchange-flows/reserve?window=day&start=191001&limit=2")
              .then(response => response.json())
              .then(data => console.log(data))
        - lang: NodeJS
          source: |-
            require('axios')
              .get("https://datapack.cryptoquant.com/v1/btc/exchange-flows/reserve?window=day&start=191001&limit=2")
              .then(response => console.log(response))
        - lang: Ruby
          source: >-
            require 'net/http'

            uri =
            URI("https://datapack.cryptoquant.com/v1/btc/exchange-flows/reserve?window=day&start=191001&limit=2")

            puts Net::HTTP.get(uri)
        - lang: Python
          source: >-
            import urllib.request

            url =
            "https://datapack.cryptoquant.com/v1/btc/exchange-flows/reserve?window=day&start=191001&limit=2"

            print(urllib.request.urlopen(url).read())
      responses:
        200:
          $ref: '#/components/responses/Reserve'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - Bearer Access Token: []



  /btc/exchange-flows/transactions-count:
    get:
      tags:
        - BTC Exchange Flows
      summary: Transactions Count (Exchange)
      description: This endpoint returns the number of transactions flowing in/out of Bitcoin exchanges.
      operationId: getTransactionsCountEF
      parameters:
        - $ref: '#/components/parameters/exchange'
        - $ref: '#/components/parameters/window'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/limit'
      x-code-samples:
        - lang: Shell
          source: >-
            curl
            "https://datapack.cryptoquant.com/v1/btc/exchange-flows/transactions-count/reserve?window=day&start=191001&limit=2"
        - lang: JavaScript
          source: >-
            fetch("https://datapack.cryptoquant.com/v1/btc/exchange-flows/transactions-count/reserve?window=day&start=191001&limit=2")
              .then(response => response.json())
              .then(data => console.log(data))
        - lang: NodeJS
          source: |-
            require('axios')
              .get("https://datapack.cryptoquant.com/v1/btc/exchange-flows/transactions-count?window=day&start=191001&limit=2")
              .then(response => console.log(response))
        - lang: Ruby
          source: >-
            require 'net/http'

            uri =
            URI("https://datapack.cryptoquant.com/v1/btc/exchange-flows/transactions-count?window=day&start=191001&limit=2")

            puts Net::HTTP.get(uri)
        - lang: Python
          source: >-
            import urllib.request

            url =
            "https://datapack.cryptoquant.com/v1/btc/exchange-flows/transactions-count?window=day&start=191001&limit=2"

            print(urllib.request.urlopen(url).read())
      responses:
        200:
          $ref: '#/components/responses/TransactionsCountEF'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - Bearer Access Token: []

  /btc/exchange-flows/inflow:
    get:
      tags:
        - BTC Exchange Flows
      summary: Inflow (Exchange)
      description: This endpoint returns the inflow of BTC into exchange wallets for as far back as we track. The average inflow is the average transaction value for transactions flowing into exchange wallets on a given day.
      operationId: getInflow
      parameters:
        - $ref: '#/components/parameters/exchange'
        - $ref: '#/components/parameters/window'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/limit'
      x-code-samples:
        - lang: Shell
          source: >-
            curl
            "https://datapack.cryptoquant.com/v1/btc/exchange-flows/inflow?window=day&start=191001&limit=2"
        - lang: JavaScript
          source: >-
            fetch("https://datapack.cryptoquant.com/v1/btc/exchange-flows/inflow?window=day&start=191001&limit=2")
              .then(response => response.json())
              .then(data => console.log(data))
        - lang: NodeJS
          source: |-
            require('axios')
              .get("https://datapack.cryptoquant.com/v1/btc/exchange-flows/inflow?window=day&start=191001&limit=2")
              .then(response => console.log(response))
        - lang: Ruby
          source: >-
            require 'net/http'

            uri =
            URI("https://datapack.cryptoquant.com/v1/btc/exchange-flows/inflow?window=day&start=191001&limit=2")

            puts Net::HTTP.get(uri)
        - lang: Python
          source: >-
            import urllib.request

            url =
            "https://datapack.cryptoquant.com/v1/btc/exchange-flows/inflow?window=day&start=191001&limit=2"

            print(urllib.request.urlopen(url).read())
      responses:
        200:
          $ref: '#/components/responses/Inflow'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - Bearer Access Token: []

  /btc/exchange-flows/outflow:
    get:
      tags:
        - BTC Exchange Flows
      summary: Outflow (Exchange)
      description: This endpoint returns the outflow of BTC into exchange wallets for as far back as we track. The average outflow is the average transaction value for transactions flowing into exchange wallets on a given day.
      operationId: getOutflow
      parameters:
        - $ref: '#/components/parameters/exchange'
        - $ref: '#/components/parameters/window'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/limit'
      x-code-samples:
        - lang: Shell
          source: >-
            curl
            "https://datapack.cryptoquant.com/v1/btc/exchange-flows/outflow?window=day&start=191001&limit=2"
        - lang: JavaScript
          source: >-
            fetch("https://datapack.cryptoquant.com/v1/btc/exchange-flows/outflow?window=day&start=191001&limit=2")
              .then(response => response.json())
              .then(data => console.log(data))
        - lang: NodeJS
          source: |-
            require('axios')
              .get("https://datapack.cryptoquant.com/v1/btc/exchange-flows/outflow?window=day&start=191001&limit=2")
              .then(response => console.log(response))
        - lang: Ruby
          source: >-
            require 'net/http'

            uri =
            URI("https://datapack.cryptoquant.com/v1/btc/exchange-flows/outflow?window=day&start=191001&limit=2")

            puts Net::HTTP.get(uri)
        - lang: Python
          source: >-
            import urllib.request

            url =
            "https://datapack.cryptoquant.com/v1/btc/exchange-flows/outflow?window=day&start=191001&limit=2"

            print(urllib.request.urlopen(url).read())
      responses:
        200:
          $ref: '#/components/responses/Outflow'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - Bearer Access Token: []

  /btc/exchange-flows/addresses-count:
    get:
      tags:
        - BTC Exchange Flows
      summary: Addresses Count (Exchange)
      description: This endpoint returns the number of addresses involved in inflow/outflow transactions.
      operationId: getAddressesCountEF
      parameters:
        - $ref: '#/components/parameters/exchange'
        - $ref: '#/components/parameters/window'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/limit'
      x-code-samples:
        - lang: Shell
          source: >-
            curl
            "https://datapack.cryptoquant.com/v1/btc/exchange-flows/addresses-count?window=day&start=191001&limit=2"
        - lang: JavaScript
          source: >-
            fetch("https://datapack.cryptoquant.com/v1/btc/exchange-flows/addresses-count?window=day&start=191001&limit=2")
              .then(response => response.json())
              .then(data => console.log(data))
        - lang: NodeJS
          source: |-
            require('axios')
              .get("https://datapack.cryptoquant.com/v1/btc/exchange-flows/addresses-count?window=day&start=191001&limit=2")
              .then(response => console.log(response))
        - lang: Ruby
          source: >-
            require 'net/http'

            uri =
            URI("https://datapack.cryptoquant.com/v1/btc/exchange-flows/addresses-count?window=day&start=191001&limit=2")

            puts Net::HTTP.get(uri)
        - lang: Python
          source: >-
            import urllib.request

            url =
            "https://datapack.cryptoquant.com/v1/btc/exchange-flows/addresses-count?window=day&start=191001&limit=2"

            print(urllib.request.urlopen(url).read())
      responses:
        200:
          $ref: '#/components/responses/AddressesCountEF'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - Bearer Access Token: []

  /btc/miner-flows/reserve:
    get:
      tags:
        - BTC Miner Flows
      summary: Reserve (Miner)
      description: This endpoint returns the full historical on-chain balance of Bitcoin mining pools.
      operationId: getReserveMF
      parameters:
        - $ref: '#/components/parameters/miner'
        - $ref: '#/components/parameters/window'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/limit'
  /btc/miner-flows/transactions-count:
    get:
      tags:
        - BTC Miner Flows
      summary: Transactions Count (Miner)
      description: This endpoint returns the number of transactions flowing in/out of Bitcoin miners.
      operationId: getTransactionsCountMF
      parameters:
        - $ref: '#/components/parameters/miner'
        - $ref: '#/components/parameters/window'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/limit' 
  /btc/miner-flows/inflow:
    get:
      tags:
        - BTC Miner Flows
      summary: Inflow (Miner)
      description: This endpoint returns the inflow of BTC into mining pool wallets for as far back as we track. The average inflow is the average transaction value for transactions flowing into mining pool wallets on a given day.
      operationId: getInflowMF
      parameters:
        - $ref: '#/components/parameters/miner'
        - $ref: '#/components/parameters/window'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/limit' 
  /btc/miner-flows/outflow:
    get:
      tags:
        - BTC Miner Flows
      summary: Outflow (Miner)
      description: This endpoint returns the outflow of BTC into mining pool wallets for as far back as we track. The average outflow is the average transaction value for transactions flowing out of mining pool wallets on a given day.
      operationId: getOutflowMF
      parameters:
        - $ref: '#/components/parameters/miner'
        - $ref: '#/components/parameters/window'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/limit' 
  /btc/miner-flows/addresses-count:
    get:
      tags:
        - BTC Miner Flows
      summary: Addresses Count (Miner)
      description: This endpoint returns the number of addresses involved in inflow/outflow transactions.
      operationId: getAddressesCountMF
      parameters:
        - $ref: '#/components/parameters/miner'
        - $ref: '#/components/parameters/window'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/limit' 
  /btc/miner-flows/hashrate:
    get:
      tags:
        - BTC Miner Flows
      summary: Hashrate (Miner)
      description: The mean speed at which hash problems are being solved by a mining pool. It is inferred by the percent of blocks mined by a mining pool during a given period multiplied by the total hashrate.
      operationId: getHashrate
      parameters:
        - $ref: '#/components/parameters/miner'
        - $ref: '#/components/parameters/window_d'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/limit' 
  /btc/miner-flows/revenue:
      get:
        tags:
          - BTC Miner Flows
        summary: Revenue (Miner)
        description: The amount of Bitcoins earned by a mining pool through blockreward(i.e. coinbase + transaction fee) during a given period.
        operationId: getRevenue
        parameters:
          - $ref: '#/components/parameters/miner'
          - $ref: '#/components/parameters/window_d'
          - $ref: '#/components/parameters/from'
          - $ref: '#/components/parameters/to'
          - $ref: '#/components/parameters/limit' 
  /btc/inter-entity-flows/exchange-to-exchange:
      get:
        tags:
          - BTC Inter Entity Flows
        summary: Exchange to Exchange
        description: The number of tokens transferred from an exchange to another exchange.
        operationId: getExchangeToExchange
        parameters:
          - $ref: '#/components/parameters/from_entity_ex'
          - $ref: '#/components/parameters/to_entity_ex'
          - $ref: '#/components/parameters/window_d'
          - $ref: '#/components/parameters/from'
          - $ref: '#/components/parameters/to'
          - $ref: '#/components/parameters/limit'
  /btc/inter-entity-flows/miner-to-exchange:
      get:
        tags:
          - BTC Inter Entity Flows
        summary: Miner to Exchange
        description: The number of tokens transferred from a mining pool to an exchange.
        operationId: getMinerToExchange
        parameters:
          - $ref: '#/components/parameters/from_entity_mp'
          - $ref: '#/components/parameters/to_entity_ex'
          - $ref: '#/components/parameters/window_d'
          - $ref: '#/components/parameters/from'
          - $ref: '#/components/parameters/to'
          - $ref: '#/components/parameters/limit'
  /btc/inter-entity-flows/exchnage-to-miner:
      get:
        tags:
          - BTC Inter Entity Flows
        summary: Exchange to Miner
        description: The number of tokens transferred from an exchange to a mining pool.
        operationId: getExchangeToMiner
        parameters:
          - $ref: '#/components/parameters/from_entity_ex'
          - $ref: '#/components/parameters/to_entity_mp'
          - $ref: '#/components/parameters/window_d'
          - $ref: '#/components/parameters/from'
          - $ref: '#/components/parameters/to'
          - $ref: '#/components/parameters/limit'
  /btc/stablecoin/network-data/supply:
      get:
        tags:
          - Stablecoin Network Data
        summary: Supply (Stablecoin)
        description: This end point returns metrics related to token supply, i.e. the amount of token in existence. We currently provide six metrics. `supply_total` is the total amount of tokens in existence, and `supply_circulating` is the approximation of the amount of tokens that are circulating in the market(e.g. excluding tokens owned by issuing company's treasury address). `supply_minted` and `supply_burned` represents how much tokens were added/subtracted from `supply_total`. `supply_issued` and `supply_redeemed` represents how much tokens were added/subtracted from `supply_circulating`. For some tokens, mint and issue(or redeem and burn) occurs simultaneously, and others are not. For further information, please refer to the section Stablecoin Issuing Mechanism.
        operationId: getSupplySC
        parameters:
          - $ref: '#/components/parameters/token'
          - $ref: '#/components/parameters/window'
          - $ref: '#/components/parameters/from'
          - $ref: '#/components/parameters/to'
          - $ref: '#/components/parameters/limit'
  /btc/stablecoin/network-data/transactions-count:
      get:
        tags:
          - Stablecoin Network Data
        summary: Transactions Count (Stablecoin)
        description: This endpoint returns metrics related to the number of transactions in that window. We provide several metrics. `transactions_count_total` is the total number of transactions in that window `transactions_count_mean`, the mean number of transactions per block in that window. `transactions_count_mint`, `transactions_count_issue`, `transactions_count_burn` and `transactions_count_redeem` are metrics that represent the number of transactions related to each actions (mint, issue, burn, redeem). For further information about the actions, please refer to the section Stablecoin Issuing Mechanism.
        operationId: getTransactionsCountSC
        parameters:
          - $ref: '#/components/parameters/token'
          - $ref: '#/components/parameters/window'
          - $ref: '#/components/parameters/from'
          - $ref: '#/components/parameters/to'
          - $ref: '#/components/parameters/limit'
  /btc/stablecoin/network-data/tokens-transferred:
      get:
        tags:
          - Stablecoin Network Data
        summary: Tokens Transferred (Stablecoin)
        description: This endpoint returns metrics related to number of tokens transferred, i.e transaction volume. We provide several metrics, `tokens_transferred_total`, the total number of transferred tokens in that window, and `tokens_transferred_mean`, the mean number of transferred tokens per transaction in that window.
        operationId: getTokensTransferredSC
        parameters:
          - $ref: '#/components/parameters/token'
          - $ref: '#/components/parameters/window'
          - $ref: '#/components/parameters/from'
          - $ref: '#/components/parameters/to'
          - $ref: '#/components/parameters/limit'
  /btc/stablecoin/network-data/addresses-count:
      get:
        tags:
          - Stablecoin Network Data
        summary: Addresses Count (Stablecoin)
        description: This endpoint returns metrics relating to the number of used addresses to transfer the token. We provide several metrics, `addresses_count_active`, the total number of unique addresses that were active (either sender or receiver) on the blockchain in a given window, `addresses_count_sender`, the number of addresses that were active as a sender, `addresses_count_receiver`, the number of addresses that were active as a receiver.
        operationId: getAddressesCountSC
        parameters:
          - $ref: '#/components/parameters/token'
          - $ref: '#/components/parameters/window'
          - $ref: '#/components/parameters/from'
          - $ref: '#/components/parameters/to'
          - $ref: '#/components/parameters/limit'
  /btc/stablecoin/market-data/price-usd:
      get:
        tags:
          - Stablecoin Market Data
        summary: Price USD (Stablecoin)
        description: This endpoint returns metrics related to the US Dollar(USD) price of the token. We provide four metrics, price_usd_open, USD opening price at the beginning of the window, price_usd_close, USD closing price at the end of the window, price_usd_high, the highest USD price in a given window, and price_usd_low, the lowest USD price in a given window.
        operationId: getPriceUSDSC
        parameters:
          - $ref: '#/components/parameters/token'
          - $ref: '#/components/parameters/window_mdb'
          - $ref: '#/components/parameters/from'
          - $ref: '#/components/parameters/to'
          - $ref: '#/components/parameters/limit'


# 사용되는 컴포넌트의 스키마
# https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#components-object
components:
  parameters:
    window:
      description: Currently we support `day` and `block`.
      explode: false
      in: query
      name: window
      required: true
      schema:
        type: string
        default: day
      style: form
      example: day

    window_mdb:
      description: Currently we support `min`, `day` or `block`.
      explode: false
      in: query
      name: window
      required: true
      schema:
        type: string
        default: day
      style: form
      example: min

    window_d:
      description: Currently, we only support `day`.
      explode: false
      in: query
      name: window
      required: true
      schema:
        type: string
        default: day
      style: form
      example: day

    isrange:
      description: true or false.
      explode: false
      in: query
      name: isrange
      required: true
      schema:
        type: boolean
        default: true
      style: form
      example: true

    period:
      description: The specific period of your interest. It can be YYMMDD or YYMMDD-YYMMDD if window=day is used. if window=block is used, specify the block height or the range of block heights. You should check if isrange=true is used when you want to specify the range.
      explode: false
      in: query
      name: period
      required: false
      schema:
        YYMMDD:
          type: string
        YYMMDD-YYMMDD:
          type: array
      style: form
      example: "190123-190601"

    from:
      description: This defines the starting time for which data will be gathered. If window=day is used, it can be formatted as YYYYMMDDTHHMMSS (indicating YYYY-MM-DDTHH:MM:SS, UTC time). If window=block is used, you can either specify the block height (e.g. 510000), or the datetime formatted as YYYYMMDDTHHMMSS (UTC time). If not specified, response will include data from the earliest time.
      explode: false
      in: query
      name: from
      required: false
      schema:
        YYYYMMDDTHHMMSS:
          type: string
      style: form
      example: "20191001T100000"

    to:
      description: This defines the ending time for which data will be gathered. If window=day is used, it can be formatted as YYYYMMDDTHHMMSS (indicating YYYY-MM-DDTHH:MM:SS, UTC time). If window=block is used, you can either specify the block height (e.g. 510000), or the datetime formatted as YYYYMMDDTHHMMSS (UTC time). If not specified, response will include data from the earliest time.
      explode: false
      in: query
      name: to
      required: false
      schema:
        YYYYMMDDTHHMMSS:
          type: string
      style: form
      example: "20191001T103025"

    limit:
      description: The maximum number of entries to return before the latest data point. If not specified, up to 100,000 entries will be returned.
      explode: false
      in: query
      name: limit
      required: false
      schema:
        type: integer
        default: 10
        minimum: 1
        maximum: 100000
      style: form
      example: 100

    exchange:
      description: An exchange from the table that we support. [See here](#tag/BTC-Exchange-Flows).
      explode: false
      in: query
      name: exchange
      required: true
      schema:
        type: string
        default: all
      style: form
      example: binance
    miner:
      description: A mining pool from the table that we support. [See here](#tag/BTC-Miner-Flows).
      explode: false
      in: query
      name: miner
      required: true
      schema:
        type: string
        default: all
      style: form
      example: antpool
    from_entity_ex:
      description:  An exchange from the table that we support.[See here](#tag/BTC-Inter-Entity-Flows)
      explode: false
      in: query
      name: from_entity
      required: true
      schema:
        type: string
      style: form
      example: binance
    from_entity_mp:
      description: A mining pool from the table that we support.[See here](#tag/BTC-Inter-Entity-Flows)
      explode: false
      in: query
      name: from_entity
      required: true
      schema:
        type: string
      style: form
      example: antpool
    to_entity_ex:
      description:  An exchange from the table that we support.[See here](#tag/BTC-Inter-Entity-Flows)
      explode: false
      in: query
      name: to_entity
      required: true
      schema:
        type: string
      style: form
      example: binance
    to_entity_mp:
      description: A mining pool from the table that we support.[See here](#tag/BTC-Inter-Entity-Flows)
      explode: false
      in: query
      name: to_entity
      required: true
      schema:
        type: string
      style: form
      example: antpool
    token:
      description: A token from the table that we support.[See here](#tag/Stablecoin-Network-Data)
      explode: false
      in: query
      name: token
      required: true
      schema:
        type: string
      style: form
      example: usdt_erc20

  responses:
    BlockBytes:
      description: The mean size(in bytes) of all blocks generated at a given window.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BlockBytesResponse'
          example:
            status:
              code: 200
              message: "success"
            result:
              window: "day"
              period: "190901-190903"
              data:
                - date: "190901"
                  block_bytes: 903661
                - date: "190902"
                  block_bytes: 1003264
                - date: "190903"
                  block_bytes: 897233

    BlockCount:
      description: The number of blocks generated in a given window.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BlockCountResponse'
          example:
            status:
              code: 200
              message: "success"
            result:
              window: "day"
              period: "190901-190903"
              data:
                - date: "190901"
                  block_count: 144
                - date: "190902"
                  block_count: 152
                - date: "190903"
                  block_count: 134

    BlockInterval:
      description: The average time between all the blocks generated during a given window in seconds.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BlockIntervalResponse'
          example:
            status:
              code: 200
              message: "success"
            result:
              window: "day"
              period: "190901-190903"
              data:
                - date: "190901"
                  block_interval: 623
                - date: "190902"
                  block_interval: 712
                - date: "190903"
                  block_interval: 592

    UTXOCount:
      description: Number of total number of unspent transaction outputs at a given period.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UTXOCountResponse'
          example:
            status:
              code: 200
              message: "success"
            result:
              window: "block"
              period: "300000-300001"
              data:
                - blockheight: 300000,
                  utxo_count: 2931
                - blockheight: 300001,
                  utxo_count: 3142

    Fees:
      description: fees_total, fees_total_usd, fees_mean, fees_mean_usd, fees_percent.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FeesResponse'
          example:
            status:
              code: 200
              message: "success"
            result:
              window: "day"
              period: "190901"
              data:
                date: "190901"
                fees_mean: 0.00013123
                fees_mean_usd: 0.11
                fees_total: 11.21331723
                fees_total_usd: 3010.23
                fees_percent: 0.012

    FeesTransaction:
      description: fees_transaction_mean, fees_transaction_mean_usd, fees_transaction_median, fees_transaction_median_usd
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FeesTransactionResponse'
          example:
            status:
              code: 200
              message: "success"
            result:
              window: "day"
              period: "190901"
              data:
                date: "190901"
                fees_transaction_mean: 0.00001321
                fees_transaction_mean_usd: 0.000312
                fees_transaction_median: 0.00001221
                fees_transaction_median_usd: 0.000289

    BlockReward:
      description: The sum of block reward for all blocks in a given window. We also provide this value in usd.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BlockRewardResponse'
          example:
            status:
              code: 200
              message: "success"
            result:
              window: "block"
              period: "555555-555557"
              data:
                - blockheight: 555555
                  blockreward: 26.62
                  blockreward_usd: 240771.37
                - blockheight: 555556
                  blockreward: 23.61
                  blockreward_usd: 210351.12
                - blockheight: 555557
                  blockreward: 29.32
                  blockreward_usd: 278263.04
    Difficulty:
      description: The mean difficulty of meeting the conditions to create a new BTC block in a given period.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DifficultyResponse'
          example:
            status:
              code: 200
              message: "success"
            result:
              window: "day"
              period: "190901-190903"
              data:
                - date: "190901"
                  difficulty: 12759819404408.99
                - date: "190902"
                  difficulty: 11425323412355.53
                - date: "190903"
                  difficulty: 17234123523452.25

    Hashrate:
      description: The mean speed at which hash problems are being solved across all miners in the network in the given window. It is the number of hashes that miners calculates per second.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HashrateResponse'
          example:
            status:
              code: 200
              message: "success"
            result:
              window: "block"
              period: "300000-300001"
              data:
                - blockheight: "300000"
                  hashrate: 8561054
                - blockheight: "300001"
                  hashrate: 9242532

    Supply:
      description: supply_total, suppply_new
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SupplyResponse'
          example:
            status:
              code: 200
              message: "success"
            result:
              window: "block"
              period: "500000-500001"
              data:
                - blockheight: "500000"
                  supply_total: 15924414.7953033
                  suppply_new: 12.5
                - blockheight: "500001"
                  supply_total: 15924414.7953033
                  suppply_new: 12.5

    TransactionsCount:
      description: transactions_count_total, transactions_count_mean
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionsCountResponse'
          example:
            status:
              code: 200
              message: "success"
            result:
              window: "day"
              period: "190901"
              data:
                - date: "190901"
                  transactions_count_total: 78912
                  transactions_count_mean: 1248


    TokensTransferred:
      description: tokens_transferred_total, tokens_transferred_mean, tokens_transferred_median
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokensTransferredResponse'
          example:
            status:
              code: 200
              message: "success"
            result:
              window: "day"
              period: "190901"
              data:
                - date: "190901"
                  tokens_transferred_total: 78912.12373645
                  tokens_transferred_mean: 1248.47276264
                  tokens_transferred_median: 1321.53121331

    Velocity:
      description: Estimated transaction volume in the trailing 1 year devided by current total supply.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VelocityResponse'
          example:
            status:
              code: 200
              message: "success"
            result:
              window: "day"
              period: "190901"
              data:
                - date: "190901"
                  velocity_total_supply: 7.3124

    AddressesCount:
      description: addresses_count_active, addresses_count_sender, addresses_count_receiver, addresses_count_new
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AddressesCountResponse'
          example:
            status:
              code: 200
              message: "success"
            result:
              window: "day"
              period: "190901"
              data:
                - date: "190901"
                  addresses_count_active: 102832
                  addresses_count_sender: 60123
                  addresses_count_receiver: 51231
                  addresses_count_new: 1231

    Inflation:
      description: Daily inflation rate, which is calculated by dividing the newly issued token on that day by the total supply.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InflationResponse'
          example:
            status:
              code: 200
              message: "success"
            result:
              window: "block"
              period: "500000-500001"
              data:
                - blockheight: "500000"
                  inflation_daily: 15924414.7953033
                - blockheight: "500001"
                  inflation_daily: 15924439.7953033

    PriceUSD:
      description: Price OHLC Data in USD
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PriceUSDResponse'
          example:
            status:
              code: 200
              message: "success"
            result:
              window: "day"
              data:
                - datetime: "2019-10-01T00:00:00"
                  price_usd_open:
                  price_usd_high:
                  price_usd_low:
                  price_usd_close:
                - datetime: "2019-10-02T00:00:00"
                  price_usd_open:
                  price_usd_high:
                  price_usd_low:
                  price_usd_close:

    Capitalization:
      description: market_cap, realized_cap, averge_cap, delta_cap, mvrv
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CapitalizationResponse'
          example:
            status:
              code: 200
              message: "success"
            result:
              window: "day"
              data:
                - datetime: "2019-10-01T00:00:00"
                  market_cap:
                  realized_cap:
                  averge_cap:
                  delta_cap:
                  mvrv:
                - datetime: "2019-10-02T00:00:00"
                  market_cap:
                  realized_cap:
                  averge_cap:
                  delta_cap:
                  mvrv:
    NVT:
      description: NVT(Network Value to Transaction) ratio
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NVTResponse'
          example:
            status:
              code: 200
              message: "success"
            result:
              window: "day"
              data:
                - datetime: "2019-10-01T00:00:00"
                  nvt:
                - datetime: "2019-10-02T00:00:00"
                  nvt:

    Reserve:
      description: The amount of BTC on a given exchange on this window.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReserveResponse'
          example:
            status:
              code: 200
              message: "success"
            result:
              window: "day"
              data:
                - datetime: "2019-10-01T00:00:00"
                  reserve:
                  reserve_usd:

                - datetime: "2019-10-02T00:00:00"
                  reserve:
                  reserve_usd:

    TransactionsCountEF:
      description: transactions_count_inflow, transactions_count_outflow
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionsCountEFResponse'
          example:
            status:
              code: 200
              message: "success"
            result:
              window: "day"
              data:
                - datetime: "2019-10-01T00:00:00"
                  transactions_count_inflow:
                  transactions_count_outflow:

                - datetime: "2019-10-02T00:00:00"
                  transactions_count_inflow:
                  transactions_count_outflow:

    Inflow:
      description: inflow_total, inflow_mean, inflow_top10
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InflowResponse'
          example:
            status:
              code: 200
              message: "success"
            result:
              window: "day"
              data:
                - datetime: "2019-10-01T00:00:00"
                  inflow_total:
                  inflow_mean:
                  inflow_top10:

                - datetime: "2019-10-02T00:00:00"
                  inflow_total:
                  inflow_mean:
                  inflow_top10:

    Outflow:
      description: outflow_total, outflow_mean, outflow_top10
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OutflowResponse'
          example:
            status:
              code: 200
              message: "success"
            result:
              window: "day"
              data:
                - datetime: "2019-10-01T00:00:00"
                  outflow_total:
                  outflow_mean:
                  outflow_top10:

                - datetime: "2019-10-02T00:00:00"
                  outflow_total:
                  outflow_mean:
                  outflow_top10:


    AddressesCountEF:
      description: The number of addresses evoking inflow/outflow transactions to exchange wallets
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AddressesCountEFResponse'
          example:
            status:
              code: 200
              message: "success"
            result:
              window: "day"
              data:
                - datetime: "2019-10-01T00:00:00"
                  addresses_count_inflow:
                  addresses_count_outflow:

                - datetime: "2019-10-02T00:00:00"
                  addresses_count_inflow:
                  addresses_count_outflow:

    Unauthorized:
      description: Requested resource requires authorization
      content:
        application/json:
          examples:
            unauthorized:
              summary: Unauthorized error response
              value:
                error:
                  code: unauthorized
                  description: Requested resource requires authorization
            wrong_credentials:
              summary: Wrong credentials error response
              value:
                error:
                  code: wrong_credentials
                  description: Supplied credentials are not valid
          # schema:
            # $ref: '#/components/schemas/ErrorResponse'
      headers:
        WWW-Authenticate:
          description: Defines required authentication method
          schema:
            default: Bearer
            type: string

  schemas:
    Status:
      type: object
      description: The status object is return with most of requests and indicates if the request was successful. If it is not successful, error information is included.
      properties:
        code:
          type: integer
          format: int32
          description: HTTP status code
        message:
          type: string
          description: Text description of the error or success.
      required:
        - code
        - message

    Window:
      type: string
      description: The size of window. It can be day or block, and it depends on the user request.

    Period:
      type: string
      description: The time period covered by this data. If your window size is block, it will be the range of block heights. Otherwise, it will be the range of windows with the format YYDDMM.

    Data:
      type: string
      description: The array containing all responses. The number of elements depends on your request.

    Date:
      type: string
      description: The date in YYDDMM. This optional field only appears when window=day is used.

    Blockheight:
      type: string
      description: The height of the block. This optional field only appears when window=block is used.

    Datetime:
      type: string
      description: The date and time formatted as YYYY-MM-DDTHH:MM:SS (UTC time).

    BlockBytesResponse:
      type: object
      required:
        - status
        - result
      properties:
        status:
          $ref: '#/components/schemas/Status'
        result:
          type: object
          required:
            - window
            - period
            - data
          properties:
            window:
              $ref: '#/components/schemas/Window'
            period:
              $ref: '#/components/schemas/Period'
            data:
              type: array
              items:
                type: object
                required:
                  - block_bytes
                properties:
                  date:
                    $ref: '#/components/schemas/Date'
                  blockheight:
                    $ref: '#/components/schemas/Date'
                  block_bytes:
                    type: integer
                    description: The mean size(in bytes) of all blocks generated in a given period.

    BlockCountResponse:
      type: object
      required:
        - status
        - result
      properties:
        status:
          $ref: '#/components/schemas/Status'
        result:
          type: object
          required:
            - window
            - period
            - data
          properties:
            window:
              $ref: '#/components/schemas/Window'
            period:
              $ref: '#/components/schemas/Period'
            data:
              type: array
              items:
                type: object
                required:
                  - block_count
                properties:
                  blockheight:
                    $ref: '#/components/schemas/Blockheight'
                  date:
                    $ref: '#/components/schemas/Date'
                  block_count:
                    type: integer
                    description: The number of blocks generated in a given window.

    BlockIntervalResponse:
      type: object
      required:
        - status
        - result
      properties:
        status:
          $ref: '#/components/schemas/Status'
        result:
          type: object
          required:
            - window
            - period
            - data
          properties:
            window:
              $ref: '#/components/schemas/Window'
            period:
              $ref: '#/components/schemas/Period'
            data:
              type: array
              items:
                type: object
                required:
                  - block_interval
                properties:
                  blockheight:
                    $ref: '#/components/schemas/Blockheight'
                  date:
                    $ref: '#/components/schemas/Date'
                  block_interval:
                    type: integer
                    description: The average time between all the blocks generated during a given window in seconds.


    UTXOCountResponse:
      type: object
      required:
        - status
        - result
      properties:
        status:
          $ref: '#/components/schemas/Status'
        result:
          type: object
          required:
            - window
            - period
            - data
          properties:
            window:
              $ref: '#/components/schemas/Window'
            period:
              $ref: '#/components/schemas/Period'
            data:
              type: array
              items:
                type: object
                required:
                  - utxo-count
                properties:
                  blockheight:
                    $ref: '#/components/schemas/Blockheight'
                  date:
                    $ref: '#/components/schemas/Date'
                  utxo-count:
                    type: integer
                    description: Number of unspent transaction outputs.


    FeesResponse:
      type: object
      required:
        - status
        - result
      properties:
        status:
          $ref: '#/components/schemas/Status'
        result:
          type: object
          required:
            - window
            - period
            - data
          properties:
            window:
              $ref: '#/components/schemas/Window'
            period:
              $ref: '#/components/schemas/Period'
            data:
              type: array
              items:
                type: object
                required:
                  - fees_mean
                  - fees_mean_usd
                  - fees_total
                  - fees_total_usd
                  - fees_percent
                properties:
                  blockheight:
                    $ref: '#/components/schemas/Blockheight'
                  date:
                    $ref: '#/components/schemas/Date'
                  fees_mean:
                    type: decimal
                    description: The average fee per block in that window.
                  fees_mean_usd:
                    type: decimal
                    description: The average fee per block in that window, in USD.
                  fees_total:
                    type: decimal
                    description: The sum of all fees during a given window that are paid to bitcoin miners in the given window.
                  fees_total_usd:
                    type: decimal
                    description: The sum of all fees during a given window that are paid to bitcoin miners in the given window, in USD.
                  fees_percent:
                    type: decimal
                    description: The percentage of fee in total block reward. Values are between 0 and 1.


    FeesTransactionResponse:
      type: object
      required:
        - status
        - result
      properties:
        status:
          $ref: '#/components/schemas/Status'
        result:
          type: object
          required:
            - fees_transaction_mean
            - fees_transaction_mean_usd
            - fees_transaction_median
            - fees_transaction_median_usd
            - fees_percent
          properties:
            blockheight:
              $ref: '#/components/schemas/Blockheight'
            date:
              $ref: '#/components/schemas/Date'
            fees_transaction_mean:
              type: decimal
              description: The average fee per transaction in a given window.
            fees_transaction_mean_usd:
              type: decimal
              description: The average fee per transaction in a given window, in USD.
            fees_transaction_median:
              type: decimal
              description: The median fee per transaction in a given window.
            fees_transaction_median_usd:
              type: decimal
              description: The median fee per transaction in a given window, in USD.


    BlockRewardResponse:
      type: object
      required:
        - status
        - result
      properties:
        status:
          $ref: '#/components/schemas/Status'
        result:
          type: object
          required:
            - window
            - period
            - data
          properties:
            window:
              $ref: '#/components/schemas/Window'
            period:
              $ref: '#/components/schemas/Period'
            data:
              type: array
              items:
                type: object
              required:
                - blockreward
                - blockreward_usd
              properties:
                blockheight:
                  $ref: '#/components/schemas/Blockheight'
                date:
                  $ref: '#/components/schemas/Date'
                blockreward:
                  type: decimal
                  description: The sum of block reward for all blocks in a given window.
                blockreward_usd:
                  type: decimal
                  description: The sum of block reward for all blocks in a given window, in USD.


    DifficultyResponse:
      type: object
      required:
        - status
        - result
      properties:
        status:
          $ref: '#/components/schemas/Status'
        result:
          type: object
          required:
            - window
            - period
            - data
          properties:
            window:
              $ref: '#/components/schemas/Window'
            period:
              $ref: '#/components/schemas/Period'
            data:
              type: array
              items:
                type: object
                required:
                  - difficulty
                properties:
                  blockheight:
                    $ref: '#/components/schemas/Blockheight'
                  date:
                    $ref: '#/components/schemas/Date'
                  difficulty:
                    type: decimal
                    description: The mean difficulty of meeting the conditions to create a new BTC block in a given period.


    HashrateResponse:
      type: object
      required:
        - status
        - result
      properties:
        status:
          $ref: '#/components/schemas/Status'
        result:
          type: object
          required:
            - window
            - period
            - data
          properties:
            window:
              $ref: '#/components/schemas/Window'
            period:
              $ref: '#/components/schemas/Period'
            data:
              type: array
              items:
                type: object
                required:
                  - hashrate
                properties:
                  blockheight:
                    $ref: '#/components/schemas/Blockheight'
                  date:
                    $ref: '#/components/schemas/Date'
                  block_count:
                    type: decimal
                    description: The mean number of hashes that miners calculates per second across all miners in the network. (GB)


    SupplyResponse:
      type: object
      required:
        - status
        - result
      properties:
        status:
          $ref: '#/components/schemas/Status'
        result:
          type: object
          required:
            - window
            - period
            - data
          properties:
            window:
              $ref: '#/components/schemas/Window'
            period:
              $ref: '#/components/schemas/Period'
            data:
              type: array
              items:
                type: object
                required:
                  - supply_total
                  - supply_new
                properties:
                  blockheight:
                    $ref: '#/components/schemas/Blockheight'
                  date:
                    $ref: '#/components/schemas/Date'
                  supply_total:
                    type: decimal
                    description: The total amount of BTC in existence.
                  supply_new:
                    type: decimal
                    description: The sum of newly issued tokens in that window.


    TransactionsCountResponse:
      type: object
      required:
        - status
        - result
      properties:
        status:
          $ref: '#/components/schemas/Status'
        result:
          type: object
          required:
            - window
            - period
            - data
          properties:
            window:
              $ref: '#/components/schemas/Window'
            period:
              $ref: '#/components/schemas/Period'
            data:
              type: array
              items:
                type: object
                required:
                  - transactions_count_total
                  - transactions_count_mean
                properties:
                  blockheight:
                    $ref: '#/components/schemas/Blockheight'
                  date:
                    $ref: '#/components/schemas/Date'
                  transactions_count_total:
                    type: decimal
                    description: Total number of transactions whether they execute or not, and whether they result in the transfer of tokens or not.
                  transactions_count_mean:
                    type: decimal
                    description: The mean number of transactions per block. For window=block, this value will be same as transactions_count_total.

    TokensTransferredResponse:
      type: object
      required:
        - status
        - result
      properties:
        status:
          $ref: '#/components/schemas/Status'
        result:
          type: object
          required:
            - window
            - period
            - data
          properties:
            window:
              $ref: '#/components/schemas/Window'
            period:
              $ref: '#/components/schemas/Period'
            data:
              type: array
              items:
                type: object
                required:
                  - tokens_transferred_total
                  - tokens_transferred_mean
                  - tokens_transferred_median
                properties:
                  blockheight:
                    $ref: '#/components/schemas/Blockheight'
                  date:
                    $ref: '#/components/schemas/Date'
                  tokens_transferred_total:
                    type: decimal
                    description: Total number of tokens transferred in that window.
                  tokens_transferred_mean:
                    type: decimal
                    description: The mean number of transferred token per transaction.
                  tokens_transferred_median:
                    type: decimal
                    description: The median number of transferred token per transaction.


    VelocityResponse:
      type: object
      required:
        - status
        - result
      properties:
        status:
          $ref: '#/components/schemas/Status'
        result:
          type: object
          required:
            - window
            - period
            - data
          properties:
            window:
              $ref: '#/components/schemas/Window'
            period:
              $ref: '#/components/schemas/Period'
            data:
              type: array
              items:
                type: object
                required:
                  - velocity_total_supply
                properties:
                  blockheight:
                    $ref: '#/components/schemas/Blockheight'
                  date:
                    $ref: '#/components/schemas/Date'
                  velocity_total_supply:
                    type: decimal
                    description: Estimated transaction volume in the trailing 1 year devided by current total supply.


    AddressesCountResponse:
      type: object
      required:
        - status
        - result
      properties:
        status:
          $ref: '#/components/schemas/Status'
        result:
          type: object
          required:
            - window
            - period
            - data
          properties:
            window:
              $ref: '#/components/schemas/Window'
            period:
              $ref: '#/components/schemas/Period'
            data:
              type: array
              items:
                type: object
                required:
                  - addresses_count_active
                  - addresses_count_sender
                  - addresses_count_receiver
                  - addresses_count_new
                properties:
                  blockheight:
                    $ref: '#/components/schemas/Blockheight'
                  date:
                    $ref: '#/components/schemas/Date'
                  addresses_count_active:
                    type: decimal
                    description: The total number of unique addresses that were active (either sender or receiver) on the blockchain in a given window.
                  addresses_count_sender:
                    type: decimal
                    description: The number of addresses that were active as a sender.
                  tokens_transferred_mean:
                    type: decimal
                    description: The number of addresses that were active as a receiver.
                  addresses_count_new:
                    type: decimal
                    description: The number of new addresses which appeared on the blockchain for the first time.

    InflationResponse:
      type: object
      required:
        - status
        - result
      properties:
        status:
          $ref: '#/components/schemas/Status'
        result:
          type: object
          required:
            - window
            - period
            - data
          properties:
            window:
              $ref: '#/components/schemas/Window'
            period:
              $ref: '#/components/schemas/Period'
            data:
              type: array
              items:
                type: object
                required:
                  - inflation_daily
                properties:
                  blockheight:
                    $ref: '#/components/schemas/Blockheight'
                  date:
                    $ref: '#/components/schemas/Date'
                  inflation_daily:
                    type: decimal
                    description: Daily inflation rate, which is calculated by dividing the newly issued token on that day by the total supply.

    PriceUSDResponse:
      type: object
      required:
        - status
        - result
      properties:
        status:
          $ref: '#/components/schemas/Status'
        result:
          type: object
          required:
            - window
            - data
          properties:
            window:
              $ref: '#/components/schemas/Window'
            data:
              type: array
              items:
                type: object
                required:
                  - price_usd_open
                  - price_usd_high
                  - price_usd_low
                  - price_usd_close
                properties:
                  blockheight:
                    $ref: '#/components/schemas/Blockheight'
                  datetime:
                    $ref: '#/components/schemas/Datetime'
                  price_usd_open:
                    type: decimal
                    description: USD opening price at the beginning of the window.
                  price_usd_high:
                    type: decimal
                    description: USD opening price at the end of the window.
                  price_usd_low:
                    type: decimal
                    description: The highest USD price in a given window.
                  price_usd_close:
                    type: decimal
                    description: The lowest USD price in a given window.

    CapitalizationResponse:
      type: object
      required:
        - status
        - result
      properties:
        status:
          $ref: '#/components/schemas/Status'
        result:
          type: object
          required:
            - window
            - data
          properties:
            window:
              $ref: '#/components/schemas/Window'
            data:
              type: array
              items:
                type: object
                required:
                  - market_cap
                  - realized_cap
                  - averge_cap
                  - delta_cap
                  - mvrv
                properties:
                  blockheight:
                    $ref: '#/components/schemas/Blockheight'
                  datetime:
                    $ref: '#/components/schemas/Datetime'
                  market_cap:
                    type: decimal
                    description: Market capitalization of BTC, calculated by total_supply * price_usd_close.
                  realized_cap:
                    type: decimal
                    description: The sum of all UTXOs multiplied at the price they last moved.
                  averge_cap:
                    type: decimal
                    description: Forever moving average, calculated by dividing the cumulated sum of daily market cap with the age of market.
                  delta_cap:
                    type: decimal
                    description: realized_cap minus average_cap.
                  mvrv:
                    type: decimal
                    description: market_cap/realized_cap

    NVTResponse:
      type: object
      required:
        - status
        - result
      properties:
        status:
          $ref: '#/components/schemas/Status'
        result:
          type: object
          required:
            - window
            - data
          properties:
            window:
              $ref: '#/components/schemas/Window'
            data:
              type: array
              items:
                type: object
                required:
                  - nvt
                properties:
                  blockheight:
                    $ref: '#/components/schemas/Blockheight'
                  datetime:
                    $ref: '#/components/schemas/Datetime'
                  nvt:
                    type: decimal
                    description: NVT(Network Value to Transaction) ratio is the network value(supply_total) divided by tokens_transferred_total.

    ReserveResponse:
      type: object
      required:
        - status
        - result
      properties:
        status:
          $ref: '#/components/schemas/Status'
        result:
          type: object
          required:
            - window
            - data
          properties:
            window:
              $ref: '#/components/schemas/Window'
            data:
              type: array
              items:
                type: object
                required:
                  - reserve
                  - reserve_usd
                properties:
                  blockheight:
                    $ref: '#/components/schemas/Blockheight'
                  datetime:
                    $ref: '#/components/schemas/Datetime'
                  reserve:
                    type: decimal
                    description: The amount of BTC on a given exchange on this window.
                  reserve_usd:
                    type: decimal
                    description: The USD value of the amount of BTC on a given exchange on this window.

    TransactionsCountEFResponse:
      type: object
      required:
        - status
        - result
      properties:
        status:
          $ref: '#/components/schemas/Status'
        result:
          type: object
          required:
            - window
            - data
          properties:
            window:
              $ref: '#/components/schemas/Window'
            data:
              type: array
              items:
                type: object
                required:
                  - transactions_count_inflow
                  - transactions_count_outflow
                properties:
                  blockheight:
                    $ref: '#/components/schemas/Blockheight'
                  datetime:
                    $ref: '#/components/schemas/Datetime'
                  transactions_count_inflow:
                    type: decimal
                    description: The number of transactions going to the exchange on this window.
                  transactions_count_outflow:
                    type: decimal
                    description: The number of transactions going out of the exchange on this window.

    InflowResponse:
      type: object
      required:
        - status
        - result
      properties:
        status:
          $ref: '#/components/schemas/Status'
        result:
          type: object
          required:
            - window
            - data
          properties:
            window:
              $ref: '#/components/schemas/Window'
            data:
              type: array
              items:
                type: object
                required:
                  - inflow_total
                  - inflow_mean
                  - inflow_top10
                properties:
                  blockheight:
                    $ref: '#/components/schemas/Blockheight'
                  datetime:
                    $ref: '#/components/schemas/Datetime'
                  inflow_total:
                    type: decimal
                    description: The total amount of BTC that flowed into the entity on this window.
                  inflow_mean:
                    type: decimal
                    description: The mean amount of tokens per transactions sent to exchange wallets.
                  inflow_top10:
                    type: decimal
                    description: The total BTC amount of top 10 transactions (in terms of total BTC sent) flowing out of exchange wallets for every day that the exchange wallets we track have been live on the blockchain.

    OutflowResponse:
      type: object
      required:
        - status
        - result
      properties:
        status:
          $ref: '#/components/schemas/Status'
        result:
          type: object
          required:
            - window
            - data
          properties:
            window:
              $ref: '#/components/schemas/Window'
            data:
              type: array
              items:
                type: object
                required:
                  - outflow_total
                  - outflow_mean
                  - outflow_top10
                properties:
                  blockheight:
                    $ref: '#/components/schemas/Blockheight'
                  datetime:
                    $ref: '#/components/schemas/Datetime'
                  outflow_total:
                    type: decimal
                    description: The total amount of BTC that flowed out of the entity on this window. Denominated in BTC.
                  outflow_mean:
                    type: decimal
                    description: The mean amount of tokens per transactions sent from exchange wallets
                  outflow_top10:
                    type: decimal
                    description: The total BTC amount of top 10 transactions (in terms of total BTC sent) flowing out of exchange wallets for every day that the exchange wallets we track have been live on the blockchain.


    AddressesCountEFResponse:
      type: object
      required:
        - status
        - result
      properties:
        status:
          $ref: '#/components/schemas/Status'
        result:
          type: object
          required:
            - window
            - data
          properties:
            window:
              $ref: '#/components/schemas/Window'
            data:
              type: array
              items:
                type: object
                required:
                  - addresses_count_inflow
                  - addresses_count_outflow
                properties:
                  blockheight:
                    $ref: '#/components/schemas/Blockheight'
                  datetime:
                    $ref: '#/components/schemas/Datetime'
                  addresses_count_inflow:
                    type: decimal
                    description: The number of addresses evoking inflow transactions to exchange wallets
                  addresses_count_outflow:
                    type: decimal
                    description: The number of addresses evoking outflow transactions from exchange wallets

  securitySchemes:
    Bearer Access Token:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
      description: |-
        You must include your access token in HTTP header in every request you make. The token is unique, issued for each client, and regularly changed(once a year). Get your access token [here](mailto:contact@cryptoquant.com).

  examples:
    Order:
      value:
        quantity: 1,
        shipDate: 2018-10-19T16:46:45Z,
        status: placed,
        complete: false
