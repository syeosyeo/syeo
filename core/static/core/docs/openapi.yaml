# 참고 - https://github.com/Redocly/redoc
# 테마설정 - https://github.com/Redocly/redoc/blob/63ae2e8e943b1cf2838db20c6c567156a2bfac45/src/theme.ts
# yaml 파일 문법 - https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#oasDocument

openapi: 3.0.0

# api 서버 주소 - 각 api 엔드포인트에 대한 full url 제공시 보여짐
# https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#server-object
servers:
  - url: https://datapack.cryptoquant.com/v1/
    description: Default server
  # - url: https://cryptoquant.com/sandbox/
  #   description: Sandbox server

# api 문서에 대한 설명
# https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#info-object
info:
  version: 0.9.1
  title: CQ DataPack™
  termsOfService: 'https://cryptoquant.com/terms_of_service/'
  contact:
    name: API Support
    email: contact@cryptoquant.com
    # url: support.cryptoquant.com
  description: |-
    Welcome to the CQ Datapack™ API. We provide simple and powerful endpoints, which you can use to get information on basic transaction data and aggregate on-chain statistics derived directly from the blockchain. This API reference provides information on available endpoints and how to interact with them.

    # Introduction
    CQ Datapack offers a set of metrics to understand the entire blockchain ecosystem.

    ```
    https://datapack.cryptoquant.com/v1/

    ├── BTC/
    │   ├── Network/            // general statistics of Bitcoin network
    │   ├── Market/             // price, capitalization, market indicators
    │   └── Exchange-Flows/     // on-chain statistics of exchanges
    │   └── Miner-Flows/        // on-chain statistics of miners
    └── StableCoin/
        ├── Network/            // USDT, TAXOS, USDC, DAI, TUSD
        ├── Market/             // price, capitalization, market indicators
        └── Exchange-Flows/     // on-chain statistics of exchanges
        └── Miner-Flows/        // on-chain statistics of miners

    ```
     <iframe src="https://docs.google.com/spreadsheets/d/e/2PACX-1vRj44BjZianQb0uG7CzFs5Uivn2dnyDQVZJPC0EzOqR40lBtawh-V9q6o2KV7TFJocf10mo4GWYQHfr/pubhtml?widget=true&amp;headers=false" style="width: 100%; height: 420px;"></iframe>

    # Authentication
    The API root endpoint URL is `https://datapack.cryptoquant.com/v1/`. Each API request requires authentication to identify the member. Authentication is provided through an access token.
    For each API request, include this HTTP header:
    `Authorization` with the `Bearer {access_token}`.

    ## Access Token
    The api key is unique, issued for each client, and regularly changed. Get your CQ Datapack API key [here](mailto:contact@cryptoquant.com).

    ## Examples
    ### HTTP Request
    ```
    GET v1/{PATH} HTTP/1.1
    Host: datapack.cryptoquant.com
    Authorization: Bearer {access_token}
    ```

    ### Python
    ```
    ''' for http.client '''
    conn = http.client.HTTPConnection(BASE_URL)
    headers = { 'Authorization': 'Bearer ' + access_token }
    conn.request("GET", "path,to,endpoint", headers=headers)
    response = conn.getresponse()

    ''' for requests '''
    import requests
    headers = { 'Authorization': 'Bearer ' + access_token }
    response = requests.get(URL, headers=headers)
    ```

    ### Javascript
    ```
    // for jquery AJAX
    var settings = {
      "url": URL,
      "method": "GET",
      "headers": {
        "Authorization": access_token
      }
    }

    $.ajax(settings).done(function (response) {
      console.log(response)
    })

    // for XHR
    var xhr = new XMLHttpRequest();
    xhr.withCredentials = true;
    xhr.addEventListener("readystatechange", function() {
      if (this.readyState === 4) {
        console.log(this.responseText);
      }
    });

    xhr.open("GET", URL);
    xhr.setRequestHeader("Authorization", access_token);
    xhr.send(null);
    ```

    ## Errors
    The Nomics API uses standard HTTP status codes to indicate success or failure. 200 represents success, 4xx represents a user error (such as a problem with your key), and 5xx represents a problem with our API.

    # Time Convention
    Windows are provided in min, hour, day and block. Each metric supports different windows, so confirm the window and metric usage. Due to the fact that onchain data is constantly updated, the smallest period available is block. Daily and hourly units are provided for added versatility. Daily and hourly windows are an aggregate of all the blocks produced during that period or are based upon the most recent block produced from that point. Days begin at 00:00:00 UTC and end at 23:59:59 UTC. Hours begin with HH:00:00 and end with HH:59:59.

# externalDocs:
#   description: Find out how to create Github repo for your OpenAPI spec.
#   url: 'https://github.com/Rebilly/generator-openapi-repo'

# 좌측 메뉴에 나타나는 주요 항목들
tags:
  - name: BTC Network Data
    description: Bitcoin on-chain network data including but not limited to token movements, fees, supply, address movements, etc.
  - name: BTC Market Data
    description: This namespace contains endpoints to retrieve metrics related to the value of Bitcoin, including price, market cap, nvt ratio, realized cap, etc. On top of providing basic market data like usd price and market cap, we focus on onchain indicators in order to evaluate the true value of Bitcoin. These indicators are useful when investing, especially when finding highs or lows. For more detailed information, please refer to the description of each metric.
  - name: BTC Exchange Flows
    description: |-
      This endpoint returns the flows of BTC into exchange wallets for as far back as we track.
      ### Supported exchanges

      | Name           |   Symbol   |   Status    |
      |----------------|------------|-------------|
      | All Exchanges  |   all      |             |
      | Binance        |   binance  | Validated   |
      | Bitfinex       |   bitfinex | Validated   |
      | Bitmex         |   bitmex   | Validated   |
      | Bitflyer       |   bitflyer | In Progress |
      | Bitstamp       |   bitstamp | In Progress |
      | Bittrex        |   Bittrex  | Validated   |
      | Coinone        |   coinone  | Validated   |
      | GOPAX          |   gopax    | Validated   |
      | Huobi Global   |   hubg     | In Progress |
      | Korbit         |   korbit   | In Progress |
      | Kraken         |   kraken   | Validated   |
      | OKex           |   okex     | In Progress |
      | Poloniex       |   poloniex | Validated   |

  - name: BTC Mining Pool Flows
  - name: ETH Network Data
  - name: ETH Market Data
  - name: Stablecoin Network Data
  - name: Stablecoin Market Data
  - name: Stablecoin Network Data
x-tagGroups:
  - name: Bitcoin
    tags:
      - BTC Network Data
      - BTC Market Data
      - BTC Exchange Flows
      - BTC Mining Pool Flows
  - name: Stablecoin
    tags:
      - Stablecoin Network Data
      - Stablecoin Market Data
# 사용 가능한 api 목록과 파라미터 등
# https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#info-object
paths:
  /btc/network-data/block-bytes:
    get:
      tags:
        - BTC Network Data
      summary: Block Bytes
      operationId: getBlockBytes
      description: The mean size(in bytes) of all blocks generated at a given window.
      parameters:
        - $ref: '#/components/parameters/window'
        - $ref: '#/components/parameters/isrange'
        - $ref: '#/components/parameters/period'
      responses:
        200:
          $ref: '#/components/responses/BlockBytes'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
        - api_key: []
  /btc/network-data/block-count:
    get:
      tags:
        - BTC Network Data
      summary: Block Count
      description:  The number of blocks generated in a given window.
  /btc/network-data/block-interval:
    get:
      tags:
        - BTC Network Data
      summary: Block Interval
      description: The average time between all the blocks generated during a given window displayed in seconds.
  /btc/network-data/utxo-count:
    get:
      tags:
        - BTC Network Data
      summary: UTXO Count
      description: The number of total number of unspent transaction outputs existing at the specified point.
  /btc/network-data/fees:
    get:
      tags:
        - BTC Network Data
      summary: Fees
      description: This endpoint returns the statistics related to fees that are paid to bitcoin miners. In general, fees are calculated by subtracting the newly issued bitcoin from the total block reward of each blocks. We provide three statistics, `fees_total`, the sum of all fees during a given window, `fees_mean`, the average fee per block in that window, and `fees_percent`, the percentage of fees relative to the total block reward. Additionally, these can be viewed in terms of USD.
  /btc/network-data/fees-transaction:
    get:
      tags:
        - BTC Network Data
      summary: Fees Transaction
      description: This endpoint returns the statistics related to fees per transaction that are paid to bitcoin miners. In general, fees are calculated by subtracting the newly issued bitcoin from the total block reward of each blocks, and this is divided by the number of transactions to calculate the average fee per transaction in each block. We provide two statistics, `fees_transaction_mean`, the average fee per transaction in a given window, `fees_transaction_median,` the median fee per transaction in that window. Additionally, these values can be calculated in USD.
  /btc/network-data/blockreward:
    get:
      tags:
        - BTC Network Data
      summary: Blockreward
      description: The sum of block reward for all blocks in a given window. We also provide this value in usd.
  /btc/network-data/difficulty:
    get:
      tags:
        - BTC Network Data
      summary: Difficulty
      description:  The mean difficulty of mining a new BTC block in a given period.
  /btc/network-data/hashrate:
    get:
      tags:
        - BTC Network Data
      summary: Hashrate
      description: The mean speed at which miners in the network are solving hash problems for  a given window. It is displayed as hashes per second.
  /btc/network-data/supply:
    get:
      tags:
        - BTC Network Data
      summary: Supply
      description: This end point returns metrics related to bitcoin supply, i.e. the amount of bitcoin in existence. We currently provide two metrics, `supply_total` , the total amount of bitcoins in existence which is the sum of all bitcoins issued by coinbase reward, and `supply_new`, the amount of newly issued tokens in a given window.
  /btc/network-data/transactions-count:
    get:
      tags:
        - BTC Network Data
      summary: Transactions Count
      description: This endpoint returns metrics related to the number of transactions in that window. We provide several metrics, `transactions_count_total`, the total number of transactions in that window `transactions_count_mean`, the mean number of transactions per block in that window.
  /btc/network-data/tokens-transferred:
    get:
      tags:
        - BTC Network Data
      summary: Tokens Transferred
      description: This endpoint returns metrics related to number of tokens transferred, i.e transaction volume. We provide several metrics, `tokens_transferred_total`, the total number of transferred tokens in that window, `tokens_transferred_mean`, the mean number of transferred tokens per transaction in that window, and `tokens_transferred_median`, the median number of transferred tokens per transaction.
  /btc/network-data/velocity:
    get:
      tags:
        - BTC Network Data
      summary: Velocity
      description: This endpoint returns metrics related to the velocity of bitcoin. Bitcoin's velocity is calculated by dividing the trailing 1 year estimated transaction volume(the cumulated sum of transferred tokens) by current supply. Velocity is a metric that explains how actively is money circulating in the market.
  /btc/network-data/addresses-count:
    get:
      tags:
        - BTC Network Data
      summary: Addresses Count
      description: This endpoint returns metrics relating to the number of used bitcoin addresses. We provide several metrics, `addresses_count_active`, the total number of unique addresses that were active (either sender or receiver) on the blockchain in a given window, `addresses_count_sender`, the number of addresses that were active as a sender, `addresses_count_receiver`, the number of addresses that were active as a receiver, and `addresses_count_new`, the number of new addresses which appeared on the blockchain for the first time.
  /btc/network-data/inflation:
    get:
      tags:
        - BTC Network Data
      summary: Inflation
      description: This end point returns metrics relating to the bitcoin inflation rate. We provide `inflation_daily`, which is daily inflation rate calculated by dividing the number of newly issued tokens on that day by the total supply.

  /btc/market-data/price-usd:
    get:
      tags:
        - BTC Market Data
      summary: Price USD
      description: This endpoint returns metrics related to the US Dollar(USD) price of BTC. For this endpoint, Minute, Day, Block 단위로 제공이 됨. We provide four metrics, `price_usd_open`, USD opening price at the beginning of the window, `price_usd_close`, USD closing price at the end of the window, `price_usd_high`, the highest USD price in a given window, and `price_usd_low`, the lowest USD price in a given window.
  /btc/market-data/capitalization:
    get:
      tags:
        - BTC Market Data
      summary: Capitalization
      description: This endpoint returns metrics related to market capitalization. First, we provide `market_cap`, which is total market capitalization of BTC, calculated by multiplying the total supply with its USD price. Moreover, we provide several adjusted capitalization metrics which are used for proper BTC valuation. `realized_cap` is the sum of each UTXO * last movement price. Since cryptocurrencies are vulnerable of being lost, unclaimed, or unreachable through various bugs, `realized_cap` is introduced to discount those coins which have unmoved for a long period. It indicates whether Bitcoin is overvalued or not. This can be described as an on-chain version of volume weighted average price(VWAP). `average_cap` is forever moving average, calculated by dividing the cumulated sum of daily market cap with the age of market. Instead of using fixed time for calculating the moving average (e.g. 50 days, 100days ...), this serves as the true mean.  Both `realized_cap` and `average_cap` are used to calculate `delta_cap` (`realized_cap`-`average_cap`). `delta_cap` is capable of spotting market bottoms. Moreover, by analyzing the movement of `delta_cap` which oscillates between `realized_cap` and `average_cap`, we could notice that market tops are reached when `delta_cap` is near `realized_cap`(in a log scaled chart). `mvrv`(Market-Value-to-Realized-Value) is a ratio, `market_cap` divided by `realized_cap`. It can be interpreted as the relationship between short-term and long-term investors (i.e. speculators vs hodlers). When this value is too high, BTC price may be overvalued, and if it is too low, there is a possibility that the price is undervalued.
  /btc/market-data/nvt:
    get:
      tags:
        - BTC Market Data
      summary: NVT
      description: NVT(Network Value to Transaction) ratio is the network value(`supply_total`) divided by `tokens_transferred_total`. `nvt` is a metric often used to determine whether Bitcoin price is overvalued or not. The theory behind this indicator is that the value of the token depends on how actively transactions take place on the network.
  /btc/exchange-flows/reserve:
    get:
      tags:
        - BTC Exchange Flows
      summary: Reserve
      description: This endpoint returns the full historical on-chain balance of Bitcoin exchanges.
  /btc/exchange-flows/transactions-count:
    get:
      tags:
        - BTC Exchange Flows
      summary: Transactions Count
      description: This endpoint returns the number of transactions flowing in/out of Bitcoin exchanges.
  /btc/exchange-flows/inflow:
    get:
      tags:
        - BTC Exchange Flows
      summary: Inflow
      description: This endpoint returns the inflow of BTC into exchange wallets for as far back as we track. The average inflow is the average transaction value for transactions flowing into exchange wallets on a given day.

  /btc/exchange-flows/outflow:
    get:
      tags:
        - BTC Exchange Flows
      summary: Outflow
      description: This endpoint returns the outflow of BTC into exchange wallets for as far back as we track. The average outflow is the average transaction value for transactions flowing into exchange wallets on a given day.
  /btc/exchange-flows/addresses-count:
    get:
      tags:
        - BTC Exchange Flows
      summary: Addresses Count
      description: This endpoint returns the number of addresses involved in inflow/outflow transactions.


# 사용되는 컴포넌트의 스키마
# https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#components-object
components:
  parameters:
    window:
      description: day or block. If window is block, you will receive the exact size of each blocks.
      explode: false
      in: query
      name: window
      required: false
      schema:
        type: string
        default: day
      style: form
      example: day
    isrange:
      description: true or false.
      explode: false
      in: query
      name: isrange
      required: false
      schema:
        type: boolean
        default: true
      style: form
      example: true
    period:
      description: The specific period of your interest. It can be YYMMDD or YYMMDD-YYMMDD if window=day is used. if window=block is used, specify the block height or the range of block heights. You should check if isrange=true is used when you want to specify the range.
      explode: false
      in: query
      name: period
      required: false
      schema:
        YYMMDD:
          type: string
        YYMMDD-YYMMDD:
          type: array
      style: form
      example: 190123-190601
  responses:
    BlockBytes:
      description: The mean size(in bytes) of all blocks generated at a given window.
      content:
        application/json:
          example:
            status:
              code: 200
              message: "success"
            result:
              window: "day"
              period: "190901-190903"
              data:
                - date: "190901"
                  block_bytes: 903661
                - date: "190902"
                  block_bytes: 1003264
                - date: "190903"
                  block_bytes: 897233
    Unauthorized:
      description: Requested resource requires authorization
      content:
        application/json:
          examples:
            unauthorized:
              summary: Unauthorized error response
              value:
                error:
                  code: unauthorized
                  description: Requested resource requires authorization
            wrong_credentials:
              summary: Wrong credentials error response
              value:
                error:
                  code: wrong_credentials
                  description: Supplied credentials are not valid
          # schema:
            # $ref: '#/components/schemas/ErrorResponse'
      headers:
        WWW-Authenticate:
          description: Defines required authentication method
          schema:
            default: Bearer
            type: string

  schemas:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    Cat:
      description: A representation of a cat
      allOf:
        - $ref: '#/components/schemas/Pet'
        - type: object
          properties:
            huntingSkill:
              type: string
              description: The measured skill for hunting
              default: lazy
              enum:
                - clueless
                - lazy
                - adventurous
                - aggressive
          required:
            - huntingSkill
    Category:
      type: object
      properties:
        id:
          description: Category ID
          allOf:
            - $ref: '#/components/schemas/Id'
        name:
          description: Category name
          type: string
          minLength: 1
        sub:
          description: Test Sub Category
          type: object
          properties:
            prop1:
              type: string
              description: Dumb Property
      xml:
        name: Category
    Dog:
      description: A representation of a dog
      allOf:
        - $ref: '#/components/schemas/Pet'
        - type: object
          properties:
            packSize:
              type: integer
              format: int32
              description: The size of the pack the dog is from
              default: 1
              minimum: 1
          required:
            - packSize
    HoneyBee:
      description: A representation of a honey bee
      allOf:
        - $ref: '#/components/schemas/Pet'
        - type: object
          properties:
            honeyPerDay:
              type: number
              description: Average amount of honey produced per day in ounces
              example: 3.14
          required:
            - honeyPerDay
    Id:
      type: integer
      format: int64
      readOnly: true
    Order:
      type: object
      properties:
        id:
          description: Order ID
          allOf:
            - $ref: '#/components/schemas/Id'
        petId:
          description: Pet ID
          allOf:
            - $ref: '#/components/schemas/Id'
        quantity:
          type: integer
          format: int32
          minimum: 1
          default: 1
        shipDate:
          description: Estimated ship date
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          description: Indicates whenever order was completed or not
          type: boolean
          default: false
          readOnly: true
        rqeuestId:
          description: Unique Request Id
          type: string
          writeOnly: true
      xml:
        name: Order
    Pet:
      type: object
      required:
        - name
        - photoUrls
      discriminator:
        propertyName: petType
        mapping:
          cat: '#/components/schemas/Cat'
          dog: '#/components/schemas/Dog'
          bee: '#/components/schemas/HoneyBee'
      properties:
        id:
          externalDocs:
            description: "Find more info here"
            url: "https://example.com"
          description: Pet ID
          allOf:
            - $ref: '#/components/schemas/Id'
        category:
          description: Categories this pet belongs to
          allOf:
            - $ref: '#/components/schemas/Category'
        name:
          description: The name given to a pet
          type: string
          example: Guru
        photoUrls:
          description: The list of URL to a cute photos featuring pet
          type: array
          maxItems: 20
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
            format: url
        friend:
          allOf:
            - $ref: '#/components/schemas/Pet'
        tags:
          description: Tags attached to the pet
          type: array
          minItems: 1
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: Pet status in the store
          enum:
            - available
            - pending
            - sold
        petType:
          description: Type of a pet
          type: string
      xml:
        name: Pet
    Tag:
      type: object
      properties:
        id:
          description: Tag ID
          allOf:
            - $ref: '#/components/schemas/Id'
        name:
          description: Tag name
          type: string
          minLength: 1
      xml:
        name: Tag
    User:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        pet:
          oneOf:
            - $ref: '#/components/schemas/Pet'
            - $ref: '#/components/schemas/Tag'
        username:
          description: User supplied username
          type: string
          minLength: 4
          example: John78
        firstName:
          description: User first name
          type: string
          minLength: 1
          example: John
        lastName:
          description: User last name
          type: string
          minLength: 1
          example: Smith
        email:
          description: User email address
          type: string
          format: email
          example: john.smith@example.com
        password:
          type: string
          description: >-
            User password, MUST contain a mix of upper and lower case letters,
            as well as digits
          format: password
          minLength: 8
          pattern: '/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/'
          example: drowssaP123
        phone:
          description: User phone number in international format
          type: string
          pattern: '/^\+(?:[0-9]-?){6,14}[0-9]$/'
          example: +1-202-555-0192
          nullable: true
        userStatus:
          description: User status
          type: integer
          format: int32
      xml:
        name: User

  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            allOf:
              - description: My Pet
                title: Pettie
              - $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            type: 'object'
            properties:
              name:
                type: string
                description: hooray
      description: Pet object that needs to be added to the store
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true

  securitySchemes:
    api_key:
      description: |-
        You must include your API Key in HTTP header in every request you make.
      type: apiKey
      name: Authorization
      in: header

  examples:
    Order:
      value:
        quantity: 1,
        shipDate: 2018-10-19T16:46:45Z,
        status: placed,
        complete: false
