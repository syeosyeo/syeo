  version: 0.9.1
  title: CQ DataPack™
  termsOfService: 'https://cryptoquant.com/terms_of_service/'
  contact:
    name: API Support
    email: contact@cryptoquant.com
    # url: support.cryptoquant.com
  description: |-
    Welcome to the CQ Datapack™ API. We provide simple and powerful endpoints, which you can use to get information on basic transaction data and aggregate on-chain statistics derived directly from the blockchain. This API reference provides information on available endpoints and how to interact with them.

    The API root endpoint URL is `https://datapack.cryptoquant.com/v1/`.

    # Introduction
    CQ Datapack offers a set of metrics to understand the entire blockchain ecosystem.

    ```
    https://datapack.cryptoquant.com/v1/

    ├── BTC/
    │   ├── Network/            // general statistics of Bitcoin network
    │   ├── Market/             // price, capitalization, market indicators
    │   └── Exchange-Flows/     // on-chain statistics of exchanges
    │   └── Miner-Flows/        // on-chain statistics of miners
    │   └── Inter-Entity-Flows/        // on-chain statistics of flows between entities
    └── StableCoin/
        ├── Network/            // USDT, TAXOS, USDC, DAI, TUSD
        ├── Market/             // price, capitalization, market indicators
        └── Exchange-Flows/     // on-chain statistics of exchanges

    ```
     <iframe src="https://docs.google.com/spreadsheets/d/e/2PACX-1vRj44BjZianQb0uG7CzFs5Uivn2dnyDQVZJPC0EzOqR40lBtawh-V9q6o2KV7TFJocf10mo4GWYQHfr/pubhtml?widget=true&amp;headers=false" style="width: 100%; height: 420px;"></iframe>

    ## Status Object
    Every response includes the status object which indicates if the request was successful. If it is not successful, 'message' specifies the cause of the error.
    ```
    {
      "status": {
          "code": 200,
          "message": "success"
      }
    }
    ```

    ## Status and Error Codes
    The CryptoQuant API uses standard HTTP status codes to indicate success or failure. 200 represents success, 4xx represents a user error (such as a problem with your key), and 5xx represents a problem with our API.

    The following table describes status and error codes returned by Datapack.
    In the status object, the `code` field contains the status code and the `message` field contains the type of response.

    | Code |   Type                      |   Description                           |
    |------|-----------------------------|-----------------------------------------|
    | `200`  |   `success`               | Request was successful.                                  |
    | `200`  |   `deprecated`            | A resource is deprecated and will removed in the future. |
    | `400`  |   `bad_request`          | Some required parameter is missing or has the wrong value.   |
    | `401`  |   `unauthorized`        | Internal authorization failed. It might mean missing or wrong credentials.   |
    | `404`  |   `not_found`             | URI is not valid or the resource ID does not correspond to an existing resource. |
    | `405`  |   `not_allowed`           | HTTP method not allowed, such as attempting to use a POST request with an endpoint that only accepts GET requests, or vice versa. |
    | `500`  |   `internal_server_error` | Unexpected error occurred. Please report this when you see it. |



    # Authentication
    Each API request requires authentication to identify the member. Authentication is provided through an access token.
    For each API request, include this HTTP header:
    `Authorization` with the `Bearer {access_token}`.

    ## Examples
    ### HTTP Request
    ```
    GET v1/{PATH} HTTP/1.1
    Host: datapack.cryptoquant.com
    Authorization: Bearer {access_token}
    ```

    ### Python
    ```
    ''' for http.client '''
    conn = http.client.HTTPConnection(BASE_URL)
    headers = { 'Authorization': 'Bearer ' + access_token }
    conn.request("GET", "path,to,endpoint", headers=headers)
    response = conn.getresponse()

    ''' for requests '''
    import requests
    headers = { 'Authorization': 'Bearer ' + access_token }
    response = requests.get(URL, headers=headers)
    ```

    ### Javascript
    ```
    // for jquery AJAX
    var settings = {
      "url": URL,
      "method": "GET",
      "headers": {
        "Authorization": access_token
      }
    }

    $.ajax(settings).done(function (response) {
      console.log(response)
    })

    // for XHR
    var xhr = new XMLHttpRequest();
    xhr.withCredentials = true;
    xhr.addEventListener("readystatechange", function() {
      if (this.readyState === 4) {
        console.log(this.responseText);
      }
    });

    xhr.open("GET", URL);
    xhr.setRequestHeader("Authorization", access_token);
    xhr.send(null);
    ```


    # Time Convention
    Windows are provided in min, hour, day and block. Each metric supports different windows, so confirm the window and metric usage. Due to the fact that onchain data is constantly updated, the smallest period available is block. Daily and hourly units are provided for added versatility. Daily and hourly windows are an aggregate of all the blocks produced during that period or are based upon the most recent block produced from that point. Days begin at 00:00:00 UTC and end at 23:59:59 UTC. Hours begin with HH:00:00 and end with HH:59:59.
